<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RohdeSchwarz.RsHmc804x.Fx40</name>
    </assembly>
    <members>
        <member name="T:IVINET.Internal.Attr">
            <summary>
            Attribute
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.Id">
            <summary>
            Attribute ID number.
            Mandatory field.
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.Name">
            <summary>
            Name of the attribute - Descriptive name
            Mandatory field.
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.Access">
            <summary>
            AttrAccess (Read / Write / Read/Write)
            Mandatory field.
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.DataType">
            <summary>
            Type of the attribute.
            Mandatory field.
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.DataTypeCollection">
            <summary>
            True signals that the data type is a collection of {AttrDataType}
            False by default
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.DefaultValue">
            <summary>
            Value assigned to the CacheValue after the attribute creation
            Default is null.
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.IsString">
            <summary>
            Returns true, if the attribute is of string or raw string data type.
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.IsEnum">
            <summary>
            Returns true, if the attribute is of data type Enum (has discrete range table defined)
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.IsNumeric">
            <summary>
            Returns true, if the data type is numeric - Int32, Int64, Real64
            </summary>
        </member>
        <member name="F:IVINET.Internal.Attr.Command">
            <summary>
            SCPI command associated with the attribute.
            Default is null (no command).
            </summary>
        </member>
        <member name="F:IVINET.Internal.Attr.DontCheckStatus">
            <summary>
            If true, checking instrument status after the communication is blocked.
            Default is false.
            </summary>
        </member>
        <member name="F:IVINET.Internal.Attr.OpcSync">
            <summary>
            If true, the attribute is OPC-synchronised.
            Default is false.
            </summary>
        </member>
        <member name="F:IVINET.Internal.Attr.InstrModels">
            <summary>
            Attribute's required models expression e.g.: 'FSW|FSVR'
            Default is null (no model limitation).
            </summary>
        </member>
        <member name="F:IVINET.Internal.Attr.InstrOptions">
            <summary>
            Attribute's required options expression e.g. '(K192)' or 'FSW(K30|K31)|FSVR(K32)'
            Default is null (no options limitation).
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.RangeTableCoerced">
            <summary>
            Coerced Range table if the attribute has it.
            Default is null (no range table).
            </summary>
        </member>
        <member name="F:IVINET.Internal.Attr.RangeTableDiscrete">
            <summary>
            The discrete range table must be set in the constructor.
            There is no need to check the data type, because the constuctor for enum attributes takes care of it
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.RangeTableRanged">
            <summary>
            Ranged Range table if the attribute has it.
            Default is null (no range table).
            </summary>
        </member>
        <member name="F:IVINET.Internal.Attr.ReadCallback">
            <summary>
            Delegate for read operations.
            Default is null (default read callback).
            </summary>
        </member>
        <member name="F:IVINET.Internal.Attr.WriteCallback">
            <summary>
            Delegate for write operations.
            Default is null (default write callback).
            </summary>
        </member>
        <member name="F:IVINET.Internal.Attr.FromStringCallback">
            <summary>
            Callback for converting string to value.
            Used only for PrecisionDateTime and PrecisionTimeSpan data types.
            Default is null.
            If null, the attribute uses default conversion of float seconds to PrecisionTimeSpan as Total Seconds.
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.HasFromStringCallback">
            <summary>
            Returns true, if the attribute has a special FromStringCallback defined
            </summary>
        </member>
        <member name="F:IVINET.Internal.Attr.ToStringCallback">
            <summary>
            Callback for value to string.
            Used only for PrecisionDateTime and PrecisionTimeSpan data types.
            Default is null.
            If null, the attribute uses default conversion of PrecisionTimeSpan TotalSeconds as float to string.
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.HasToStringCallback">
            <summary>
            Returns true, if the attribute has a special ToStringCallback defined
            </summary>
        </member>
        <member name="F:IVINET.Internal.Attr._cacheValue">
            <summary>
            Current value (cached)
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.Readable">
            <summary>
            Returns true, if the attribute is readable
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.Writable">
            <summary>
            Returns true, if the attribute is writable
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.AllowedRtCoerced">
            <summary>
            Based on the DataType, true means the attribute can have Coerced RangeTable
            </summary>
        </member>
        <member name="P:IVINET.Internal.Attr.AllowedRtRanged">
            <summary>
            Based on the DataType, true means the attribute can have Ranged RangeTable
            </summary>
        </member>
        <member name="M:IVINET.Internal.Attr.#ctor(System.Int64,System.String,IVINET.Internal.AttrDataType,IVINET.Internal.AttrAccess,System.Object)">
            <summary>
            Standard Attribute definition. For Enum data types, use the overload.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Attr.#ctor(System.Int64,System.String,IVINET.Internal.AttrAccess,IVINET.Internal.RangeTableDiscrete{System.Enum},System.Enum)">
            <summary>
            Constructor for Enum Attributes
            </summary>
        </member>
        <member name="M:IVINET.Internal.Attr.#ctor(System.Int64,System.String,IVINET.Internal.AttrDataType)">
            <summary>
            Constructor for Event Attributes
            </summary>
        </member>
        <member name="M:IVINET.Internal.Attr.SetCacheValue(System.Object)">
            <summary>
            Sets value into CacheValue property
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:IVINET.Internal.Attr.GetCacheValue">
            <summary>
            Gets value from p2value of attribute (cache)
            </summary>
        </member>
        <member name="M:IVINET.Internal.Attr.BuildCommandString(IVINET.Internal.RepCapItemCollection)">
            <summary>
            Builds the command from the attribute command
            </summary>
        </member>
        <member name="M:IVINET.Internal.Attr.BuildCommandString(IVINET.Internal.RepCapItemCollection,System.String)">
            <summary>
            Builds the command from the custom command
            </summary>
        </member>
        <member name="M:IVINET.Internal.Attr.FromStringToValue(System.String)">
            <summary>
            Converts the input string to the object based on the data type.
            If the FromStringCallback is defined, it takes priority.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Attr.ToStringValue(System.Object)">
            <summary>
            Converts the input object value to the string based on the data type.
            If the ToStringCallback is defined, it takes priority.
            </summary>
        </member>
        <member name="T:IVINET.Internal.AttrAccess">
            <summary>
            Access to attribute
            </summary>
        </member>
        <member name="T:IVINET.Internal.AttrDataType">
            <summary>
            Data type of attributes
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:IVINET.Internal.Core" -->
        <member name="M:IVINET.Internal.Core.WriteCallback(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr,System.Object)">
            <summary>
            Default Attribute's Write callback
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.WriteCallbackSpecial_CustomCmd(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr,System.Object,System.String)">
            <summary>
            Attribute's Write callback with custom command that is preffered before the attribute's command.
            Supported attribute data types: All
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.WriteCallbackSpecial_EncloseParam(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr,System.String,System.Object,System.String)">
            <summary>
            Write callback where you can enter before + after strings that enclose the attribute value parameter.
            WARNING!!! For before string, you have to include the space between the command and the value!
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.WriteCallbackSpecial_CustomCmdEncloseParam(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr,System.String,System.String,System.Object,System.String)">
            <summary>
            Write callback where you can enter custom SCPI command and before + after strings that enclose the attribute value parameter.
            WARNING!!! For before string, you have to include the space between the command and the value!
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core._GetCollectionCmdValue(IVINET.Internal.Attr,System.Object)">
            <summary>
            Returns attribute's collection data type command parameter value
            You have to format it to the complete command with $"{cmd} {value}";
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.ReadCallback(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr)">
            <summary>
            Default Attribute's Read callback
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.ReadCallbackSpecial_CustomCmd(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr,System.String)">
            <summary>
            Special Read Attribute callback with custom SCPI parameter that is used instead of the at.Command.
            Supported attribute data types: All
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.ReadCallbackSpecial_StringResponse(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr)">
            <summary>
            Special Attribute callback that just returns instrument's string response trimmed by LF and quotes
            Supported attribute data types: All
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.ReadCallbackSpecial_CustomCmdStringResponse(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr,System.String)">
            <summary>
            Special Attribute callback that just returns instrument's string response trimmed by LF and quotes
            Supported attribute data types: All
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.ReadCallbackSpecial_AnyQuotedResponse(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr)">
            <summary>
            Special Read Attribute callback that can parse scalar data types enclosed by quotes
            Supported attribute data types: ALL SCALAR
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.ReadCallbackSpecial_AnyQuotedResponseCustomCmd(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr,System.String)">
            <summary>
            Special Read Attribute callback with custom SCPI parameter that can parse scalar data types enclosed by quotes
            Supported attribute data types: ALL SCALAR
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.ReadCallbackSpecial_BinOrHexPatternRead(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr)">
            <summary>
            Special Read Attribute callback for strings where the read value from the instrument
            is stripped of the '#B' or '#H' prefix and the length csv-suffix: '#B001100,6' => '001100'
            Supported attribute data types: String, RawString
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core._WriteCallbackSpecial_BinOrHexPatternWrite_CustomCmd(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr,System.Object,IVINET.Internal.BinPatternMode,System.String)">
            <summary>
            Special Write Attribute callback for strings where the value to write to the instrument
            is prefixed with the '#B' or '#H' and suffixed with the length number: '001100' => '#B001100,6'
            Supported attribute data types: String, RawString
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.WriteCallbackSpecial_BinPatternWrite(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr,System.Object)">
            <summary>
            Special Write Attribute callback for strings where the write value
            is prefixed with the '#B' and suffixed with the length number: '001100' => '#B001100,6'
            Supported attribute data types: String, RawString
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.WriteCallbackSpecial_BinPatternWriteNoLength(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr,System.Object)">
            <summary>
            Special Write Attribute callback for strings where the write value
            is prefixed with the '#B' (!!! NO LENGTH SUFFIX !!!): '001100' => '#B001100'
            Supported attribute data types: String, RawString
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.WriteCallbackSpecial_HexPatternWrite(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr,System.Object)">
            <summary>
            Special Write Attribute callback for strings where the write value
            is prefixed with the '#H' and suffixed with the length number: 'FAF8' => '#HFAF8,16'
            Supported attribute data types: String, RawString
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.WriteCallbackSpecial_HexPatternWriteNoLength(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr,System.Object)">
            <summary>
            Special Write Attribute callback for strings where the write value
            is prefixed with the '#H' (!!! NO LENGTH SUFFIX !!!): 'FAF8' => '#HFAF8'
            Supported attribute data types: String, RawString
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.SetAttribute(IVINET.Internal.RepCapItemCollection,System.Int64,System.Object)">
            <summary>
            Sets the current value of the int, long, boolean, double and string attribute to the instrument.
            Depending on the configuration of the attribute, the function performs defined actions.
            It invokes default or attribute-specific WriteCallback(), that does the I/O operation
            and sends the new value to the instrument. The value is also stored in the attribute's cache field.
            </summary>
            <param name="repCapValues">Repeated Capabilities values collection</param>
            <param name="idAttr">Attribute ID</param>
            <param name="value">Attribute value to set</param>
        </member>
        <member name="F:IVINET.Internal.Core._queryParameter">
            <summary>
            Query parameter field. Assigned in the GetAttribute() method, used in QueryAttrCommand() methods
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.GetAttribute(IVINET.Internal.RepCapItemCollection,System.Int64,System.String)">
            <summary>
            Obtains the current value of the int, long, boolean, double and string attribute.
            Depending on the configuration of the attribute, the function performs defined actions
            The method invoked ReadCallback() for the attribute, that does the I/O operation
            and obtains a new value. The value is stored in the attribute's cache field
            and returned to the user in the value return variable.
            queryParameter is an additional parameter for queries. Value "" or null means no additional parameter.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.InitWithOptions(System.String,System.Boolean,System.Boolean,Ivi.Driver.LockType,System.String,System.String,Ivi.Driver.IIviDriver)">
            <summary>
            Overwritten by CoreEx
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.Reset">
            <summary>
            Instrument driver setup with resetting
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.DefaultInstrSetup">
            <summary>
            Instrument driver setup without resetting
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.InitAttributes">
            <summary>
            Driver specific attribute initialization
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core._ParseInitWithOptionsString(System.String)">
            <summary>
            Takes the input string and parses it into output Dictionary of tokens
            If the setting is in a group e.g. DriverSetup=(WriteDelay=50),
            the Key value gets the group name as prefix. e.g. in this case DriverSetup_WriteDelay=50
            Keys are all Upper Cases
            </summary>
            <param name="settings">Settings string to parse</param>
            <returns>Output dictionary of tokens</returns>
        </member>
        <member name="P:IVINET.Internal.Core.Version">
            <summary>
            Version of the Core and the whole Internal Folder
            </summary>
        </member>
        <member name="P:IVINET.Internal.Core.IO">
            <summary>
            Interface for instrument's Write and Query operations.
            </summary>
        </member>
        <member name="F:IVINET.Internal.Core.Simulating">
            <summary>
            If true, the Core is in simulation mode capable of functioning without an instrument
            </summary>
        </member>
        <member name="F:IVINET.Internal.Core._queryInstrumentStatus">
            <summary>
            Private field for the QueryInstrumentStatus
            </summary>
        </member>
        <member name="P:IVINET.Internal.Core.QueryInstrumentStatus">
            <summary>
            Provides set/get for Instrument's QueryInstrumentStatus
            </summary>
        </member>
        <member name="F:IVINET.Internal.Core.RangeCheck">
            <summary>
            If true, the Core performs Attribute's range checking
            </summary>
        </member>
        <member name="F:IVINET.Internal.Core._optionCheck">
            <summary>
            Private field for the public OptionCheck
            </summary>
        </member>
        <member name="P:IVINET.Internal.Core.OptionCheck">
            <summary>
            If true, the Core performs attribute's option and model checking.
            The OptionChecking also affects CheckAndThrowIfNotInstrument() and CheckOption() methods used in driver's Hi-level methods.
            </summary>
        </member>
        <member name="F:IVINET.Internal.Core.InstrSetting">
            <summary>
            Instrument settings from the init and option string
            </summary>
        </member>
        <member name="P:IVINET.Internal.Core.IviSessionName">
            <summary>
            If Ivi Logical / Driver Name is used as resourceName,
            this property holds the value of the referenced Driver Session Name
            Otherwise it returns null
            </summary>
        </member>
        <member name="P:IVINET.Internal.Core.ResolvedResourceName">
            <summary>
            Resolved VISA resource name with which the VISA session is opened
            </summary>
        </member>
        <member name="F:IVINET.Internal.Core.Attributes">
            <summary>
            All the attributes already used.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.LoadConfigStore">
            <summary>
            Loading config store and handling COM exceptions
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.CreateRangeTables">
            <summary>
            Overriden by CoreEx.CreateRangeTables()
            Creates all the necessary range tables.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.CreateAttribute(System.Int64)">
            <summary>
            / Overriden by CoreEx.CreateAttribute()
            Instantiates one attribute with the entered id
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.GetAttributeById(System.Int64)">
            <summary>
            Returns attribute in the attribute list.
            If the attribute is accessed for the first time, it is instantiated, set to default value, and added to the Attributes dictionary.
            </summary>
            <param name="id">ID of attribute</param>
            <returns>Attribute object</returns>
        </member>
        <member name="M:IVINET.Internal.Core.SetAttributesToDefault">
            <summary>
            Sets attribute values to default
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core._IsAttrWithOpcQuery(IVINET.Internal.Attr)">
            <summary>
            Returns true, if the attribute query should be performed with OPC-sync.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core._IsAttrWithOpcWrite(IVINET.Internal.Attr)">
            <summary>
            Returns true, if the attribute write should be performed with OPC-sync.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.WriteAttrCommand(IVINET.Internal.Attr,System.String)">
            <summary>
            Sends command to the instrument taking the following attribute's flags into the account:
            OpcSync + InstrSetting.OpcSyncAttrQueries
            </summary>
            <param name="at">Attribute</param>
            <param name="command">Command as string to send</param>
        </member>
        <member name="M:IVINET.Internal.Core._AppendQueryParameter(System.String)">
            <summary>
            Appends queryParameter to the entered query. Afterwards sets the queryParameter field to null
            </summary>
            <param name="query">input query</param>
            <returns>query appended by queryParameter if exists</returns>
        </member>
        <member name="M:IVINET.Internal.Core.QueryAttrCommandIntegerArray(IVINET.Internal.Attr,System.String)">
            <summary>
            Reads query from the instrument taking the following attribute's flags into the account:
            OpcSync + InstrSetting.OpcSyncAttrQueries
            The response can be binary or ascii and is converted to an integer array.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.QueryAttrCommandFloatArray(IVINET.Internal.Attr,System.String)">
            <summary>
            Reads query from the instrument taking the following attribute's flags into the account:
            Writable, OpcSync + InstrSetting.OpcSyncAttrQueries
            The response can be binary or ascii and is converted to an float array.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.QueryAttrCommandRaw(IVINET.Internal.Attr,System.String)">
            <summary>
            Reads query from the instrument taking the following attribute's flags into the account:
            Writable, OpcSync + InstrSetting.OpcSyncAttrQueries
            The response is raw exactly like read
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.QueryAttrCommand(IVINET.Internal.Attr,System.String)">
            <summary>
            Reads query from the instrument taking the following attribute's flags into the account:
            Writable, OpcSync + InstrSetting.OpcSyncAttrQueries
            The response is trimmed of trailing LineFeed characters
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.CheckRepeatedCapability(System.String,System.String)">
            <summary>
            Check if the RepCap name and key exist
            </summary>
            <param name="name"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.Core.BuildRepeatedCapability(System.String,System.String)">
            <summary>
            Builds RepCap collection from one pair of Name and Key
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.BuildRepeatedCapability(System.String,System.String,System.String,System.String)">
            <summary>
            Builds RepCap collection from 2 pairs of Names and Keys
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.BuildRepeatedCapability(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Builds RepCap collection from 3 pairs of Names and Keys
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.BuildRepeatedCapability(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Builds RepCap collection from 4 pairs of Names and Keys
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.BuildRepeatedCapability(System.String[])">
            <summary>
            Builds RepCap collection from pairs of Names and Keys
            </summary>
            <param name="items">Pairs of Names and Keys</param>
        </member>
        <member name="M:IVINET.Internal.Core.Dispose(System.Boolean)">
            <summary>
            Disposes of the Core object
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.Close">
            <summary>
            This closes connection into instrument
            </summary>
        </member>
        <member name="P:IVINET.Internal.Core.InstrumentOptions">
            <summary>
            Returns all current instrument options as ICollection
            </summary>
            <returns>ICollection of the current instrument options</returns>
        </member>
        <member name="M:IVINET.Internal.Core.IsInstrumentModel(System.String)">
            <summary>
            Returns true, if the current instrument type fits the entered string
            </summary>
            <param name="instrument">Instrument type to check for</param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.Core.GetFullInstrumentModel">
            <summary>
            Returns full instrument model, e.g. 'FSW26'
            Use it in the IviDriverIdentity to assign the InstrumentModel property
            </summary>
            <returns>Full instrument model</returns>
        </member>
        <member name="M:IVINET.Internal.Core.CheckInstrumentModel(System.String)">
            <summary>
            Throws an exception, if the current <paramref name="requiredInstrument"/> type does not fit the entered instrument
            Value of OptionCheck property is taken into consideration: If OptionCheck is FALSE, instrument model check is skipped
            </summary>
            <param name="requiredInstrument">Required instrument type to check for</param>
        </member>
        <member name="M:IVINET.Internal.Core.CheckInstrumentModel(System.String,System.String)">
            <summary>
            Throws an exception, if the current instrument type does not fit any of the two entered instruments
            Value of OptionCheck property is taken into consideration: If OptionCheck is FALSE, instrument model check is skipped
            </summary>
            <param name="instrument1">Alternative Instrument 1 to check for</param>
            <param name="instrument2">Alternative Instrument 2 to check for</param>
        </member>
        <member name="M:IVINET.Internal.Core.AddLogger(System.IO.Stream)">
            <summary>
            Add new StreamWriter listener
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.RemoveLogger(System.IO.Stream)">
            <summary>
            Remove StreamWriter listener
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.WriteStringToLog(System.String)">
            <summary>
            <para>Writes string message to log.</para>
            <para>Identifier = RSPWRMETER_FUNC_WRITE_STRING_TO_LOG</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.GetAttribute``1">
            <summary>
            Returns attribute of assembly
            </summary>
            <typeparam name="T">Type of attribute</typeparam>
            <returns>found attribute</returns>
        </member>
        <member name="M:IVINET.Internal.Core.AddService(System.Type,System.Object)">
            <summary>
            Adds service
            </summary>
            <param name="identifier">Service identifier</param>
            <param name="serviceProvider">Service</param>
        </member>
        <member name="M:IVINET.Internal.Core.GetService(System.Type)">
            <summary>
            Returns service specified by identifier
            </summary>
            <param name="identifier"></param>
            <returns>Object of service</returns>
        </member>
        <member name="M:IVINET.Internal.Core.Lock">
            <summary>
            Lock
            </summary>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.Core.Lock(Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Lock
            </summary>
            <param name="maxTime">time</param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.Core.CheckStatus">
            <summary>
            Performs instrument status checking with taking QueryInstrumentStatus property value into consideration
            If QueryInstrumentStatus is FALSE, instrument status checking is skipped
            </summary>
        </member>
        <member name="M:IVINET.Internal.Core.CheckOption(System.String)">
            <summary>
            Throws Ivi.Driver.OptionMissingException() if the entered option is missing.
            The option can only be a simple one e.g.: 'K20'
            Value of OptionCheck property is taken into consideration: If OptionCheck is FALSE, option checking is skipped
            </summary>
            <param name="option">option string</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:IVINET.Internal.Core.CheckComplexOptions(System.String)" -->
        <member name="M:IVINET.Internal.Core.CheckOption(System.String,System.String)">
            <summary>
            Throws Ivi.Driver.OptionMissingException() if neither of the two options is present
            Each option string can only be a simple one e.g.: 'K20'
            Value of OptionCheck property is taken into consideration: If OptionCheck is FALSE, option checking is skipped
            </summary>
            <param name="option1">option1 string</param>
            <param name="option2">option2 string</param>
        </member>
        <member name="M:IVINET.Internal.Core.CheckOption(System.String,System.String,System.String)">
            <summary>
            Throws Ivi.Driver.OptionMissingException() if none of the three options is present
            Each option string can only be a simple one e.g.: 'K20'
            Value of OptionCheck property is taken into consideration: If OptionCheck is FALSE, option checking is skipped
            </summary>
            <param name="option1">option1 string</param>
            <param name="option2">option2 string</param>
            <param name="option3">option3 string</param>
        </member>
        <member name="M:IVINET.Internal.Core.CheckOptions(System.String[])">
            <summary>
            Throws Ivi.Driver.OptionMissingException() if none of the entered options array is present
            Each option string can only be a simple one e.g.: 'K20'
            Value of OptionCheck property is taken into consideration: If OptionCheck is FALSE, option checking is skipped
            </summary>
            <param name="options">Array with option string alternatives</param>
        </member>
        <member name="M:IVINET.Internal.Core.IsOptionAvailable(System.String)">
            <summary>
            Return true, if the instrument has the entered option installed
            The option can only be a simple one e.g.: "K20"
            </summary>
            <param name="option">option string</param>
        </member>
        <member name="M:IVINET.Internal.Core.CheckAttrModelOption(IVINET.Internal.Attr)">
            <summary>
            Throws Ivi.Driver.OptionMissingException() if the entered attribute's model and options are not fulfilled
            Value of OptionCheck property is taken into consideration: If OptionCheck is FALSE, the option checking is skipped
            </summary>
            <param name="at">Attribute to check</param>
        </member>
        <member name="P:IVINET.Internal.Core.Ex">
            <summary>
            <para>Reference to the extended core, use it to access attributes and range tables.</para>
            </summary>
        </member>
        <member name="T:IVINET.Internal.CheckStatusDelegate">
            <summary>
            Check status delegate
            </summary>
        </member>
        <member name="M:IVINET.Internal.DriverProperties.#ctor">
            <summary>
            Constructor to set default values;
            </summary>
        </member>
        <member name="M:IVINET.Internal.DriverProperties.ApplyOptionSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Apply settings to Property fields
            </summary>
            <param name="settings">Settings in Dictionary. Only the relevant ones for DriverProperties are set</param>
        </member>
        <member name="T:IVINET.Internal.DriverErrors">
            <summary>
            Instrument-class related errors
            </summary>
        </member>
        <member name="M:IVINET.Internal.DriverErrors.ThrowOperationNotSupported(System.String,System.String)">
            <summary>
            Throws Ivi.Driver.OperationNotSupportedException - general purpose use
            </summary>
            <param name="operation">Operation description</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.DriverErrors.ThrowIsNotInstrument(System.String,System.String,System.String)">
            <summary>
            Throws Ivi.Driver.OperationNotSupportedException - use it for asserting an instrument model is as expected
            </summary>
            <param name="requiredModel">Required instrument for the operation</param>
            <param name="errMessageModel">instrument model for error message</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="T:IVINET.Internal.InstrumentErrors">
            <summary>
            Static class containing all the Instrument Erros and Assertions
            </summary>
        </member>
        <member name="M:IVINET.Internal.InstrumentErrors.AssertNoInstrumentStatusErrors(System.Collections.Generic.ICollection{Ivi.Driver.ErrorQueryResult},System.String)">
            <summary>
            Checks the errors list and of it contains at least one element, throws Ivi.Driver.InstrumentStatusException
            </summary>
            <param name="errors">Errors collection</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.InstrumentErrors.AssertNoInstrumentStatusErrors(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Checks the errors list and of it contains at least one element, throws Ivi.Driver.InstrumentStatusException
            </summary>
            <param name="errors">List of error strings</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.InstrumentErrors.ThrowOpcToutException(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an Ivi.Driver.MaxTimeExceededException - use it for any timeout error
            </summary>
            <param name="opcTimeoutMs">Current session OPC timeout</param>
            <param name="usedTimeoutMs">Used Timeout</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.InstrumentErrors.ThrowIdQueryFailedException(System.String,System.String[])">
            <summary>
            Throws Ivi.Driver.IdQueryFailedException - internally used if an instrument is not supported by the driver
            </summary>
            <param name="model">Current instrument model</param>
            <param name="supportedInstrumentModels">Models supported by the driver</param>
        </member>
        <member name="M:IVINET.Internal.InstrumentErrors.ThrowUnexpectedResponseException(System.String,System.String,System.String)">
            <summary>
            Throws Ivi.Driver.UnexpectedResponseException - use it in case an instrument response is not as expected
            </summary>
            <param name="command">Command sent to the instrument</param>
            <param name="response">Response received from the instrument</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.InstrumentErrors.ThrowBinDataBlockUnexpectedResponseException(System.String)">
            <summary>
            Throws Ivi.Driver.UnexpectedResponseException - use it in case an instrument response is not a binary block
            </summary>
            <param name="receivedData">Response received from the instrument</param>
        </member>
        <member name="M:IVINET.Internal.InstrumentErrors.AssertCommandContainsNoQuestionMark(System.String,System.String)">
            <summary>
            Checks a command and throws Ivi.Driver.OperationNotSupportedException if the command contains a question-mark
            </summary>
            <param name="command">Command to check</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.InstrumentErrors.AssertQueryContainsQuestionMark(System.String,System.String)">
            <summary>
            Checks a command and throws Ivi.Driver.OperationNotSupportedException if the query does not contain a question-mark
            </summary>
            <param name="query">Query to check</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.RangeTableErrors.AssertRangedRtValueInRange(System.Object,IVINET.Internal.AttrDataType,System.Double,System.Double)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException - use it for RangeTable type Ranged if a value is Out Of Range 
            </summary>
        </member>
        <member name="M:IVINET.Internal.DataTypeErrors.ThrowInvalidTypeException(IVINET.Internal.AttrDataType,System.String)">
            <summary>
            Throws Ivi.Driver.OperationNotSupportedException - use it for asserting certain Attribute Data Types
            </summary>
            <param name="type">Attribute data type</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.DataTypeErrors.ThrowInvalidTypeException(System.Object,System.String)">
            <summary>
            Throws Ivi.Driver.OperationNotSupportedException - use it for asserting certain data types
            </summary>
        </member>
        <member name="M:IVINET.Internal.DataTypeErrors.AssertAttrEnumType(IVINET.Internal.Attr,System.Type,System.String)">
            <summary>
            Throws Ivi.Driver.OperationNotSupportedException if the attribute is not of enum type with the defined enum.
            You can skip the assertion of the concrete enum type by entering null there.
            </summary>
        </member>
        <member name="M:IVINET.Internal.DataTypeErrors.AssertAttrDataType(IVINET.Internal.Attr,IVINET.Internal.AttrDataType,System.String)">
            <summary>
            Throws Ivi.Driver.OperationNotSupportedException if the attribute is not of the required data type.
            </summary>
        </member>
        <member name="M:IVINET.Internal.DataTypeErrors.AssertAttrDataType(IVINET.Internal.Attr,IVINET.Internal.AttrDataType,IVINET.Internal.AttrDataType,System.String)">
            <summary>
            Throws Ivi.Driver.OperationNotSupportedException if the attribute is not of the data typeA or typeB.
            </summary>
        </member>
        <member name="M:IVINET.Internal.DataTypeErrors.AssertAttrDataType(IVINET.Internal.Attr,IVINET.Internal.AttrDataType,IVINET.Internal.AttrDataType,IVINET.Internal.AttrDataType,System.String)">
            <summary>
            Throws Ivi.Driver.OperationNotSupportedException if the attribute is not of the data typeA or typeB or typeC.
            </summary>
        </member>
        <member name="M:IVINET.Internal.DataTypeErrors.AssertAttrDataType(IVINET.Internal.Attr,IVINET.Internal.AttrDataType,IVINET.Internal.AttrDataType,IVINET.Internal.AttrDataType,IVINET.Internal.AttrDataType,System.String)">
            <summary>
            Throws Ivi.Driver.OperationNotSupportedException if the attribute is not of the data typeA or typeB or typeC or typeD.
            </summary>
        </member>
        <member name="M:IVINET.Internal.DataTypeErrors.AssertAttrDataType(IVINET.Internal.Attr,System.Collections.Generic.IEnumerable{IVINET.Internal.AttrDataType},System.String)">
            <summary>
            Throws Ivi.Driver.OperationNotSupportedException if the attribute is not of any of the data types listed in the types collection.
            </summary>
        </member>
        <member name="M:IVINET.Internal.DataTypeErrors.AssertAttrDataTypeScalar(IVINET.Internal.Attr,System.String)">
            <summary>
            Throws Ivi.Driver.OperationNotSupportedException if the attribute data type is a collection .
            </summary>
        </member>
        <member name="M:IVINET.Internal.DataTypeErrors.AssertAttrDataTypeCollection(IVINET.Internal.Attr,System.String)">
            <summary>
            Throws Ivi.Driver.OperationNotSupportedException if the attribute data type is a scalar.
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapErrors.ThrowRepCapsCollNullException(System.String)">
            <summary>
            Throws Ivi.Driver.SelectorNameRequiredException - used internally to check proper RepCaps definition
            </summary>
            <param name="command">Command definition</param>
        </member>
        <member name="M:IVINET.Internal.RepCapErrors.ThrowRepCapNameNotFoundException(System.String,IVINET.Internal.RepCapItemCollection,System.String)">
            <summary>
            Throws Ivi.Driver.SelectorNameException - used internally to check proper RepCaps definition
            </summary>
            <param name="rcName">Repeated Capability name</param>
            <param name="collection">Repeated Capability collection</param>
            <param name="command">Command definition</param>
        </member>
        <member name="M:IVINET.Internal.RepCapErrors.ThrowRepCapItemsSizeException(System.Int32)">
            <summary>
            Throws Ivi.Driver.SelectorFormatException - used internally to check proper RepCaps definition
            </summary>
            <param name="itemsSize">Repeated Capability collection size</param>
        </member>
        <member name="T:IVINET.Internal.ValueRangeAssertions">
            <summary>
            Assertions of values generating Ivi.Driver.OutOfRangeException
            </summary>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.AssertValueHigherThan(System.Double,System.Double,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException for double value lower than the minValue
            </summary>
            <param name="value">Value to assert</param>
            <param name="minValue">Minimum allowed value</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.AssertValueHigherThan(System.Int32,System.Int32,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException for integer value lower than the minValue
            </summary>
            <param name="value">Value to assert</param>
            <param name="minValue">Minimum allowed value</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.AssertValueLowerThan(System.Double,System.Double,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException for double value higher than the maxValue
            </summary>
            <param name="value">Value to assert</param>
            <param name="maxValue">Maximum allowed value</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.AssertValueLowerThan(System.Int32,System.Int32,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException for integer value higher than the maxValue
            </summary>
            <param name="value">Value to assert</param>
            <param name="maxValue">Maximum allowed value</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.AssertValueInRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException for integer value outside the minValue .. maxValue range
            </summary>
            <param name="value">Value to assert</param>
            <param name="minValue">Minimum allowed value</param>
            <param name="maxValue">Maximum allowed value</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.AssertValueInRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException for double value outside the minValue .. maxValue range
            </summary>
            <param name="value">Value to assert</param>
            <param name="minValue">Minimum allowed value</param>
            <param name="maxValue">Maximum allowed value</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.RangeErrors.ThrowValueOutOfRangeException(System.Int32,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException - use it to assert an integer value within a certain range
            </summary>
            <param name="value">Value to put into the exception message</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.RangeErrors.ThrowValueOutOfRangeException(System.Double,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException - use it to assert a double value within a certain range
            </summary>
            <param name="value">Value to put into the exception message</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.RangeErrors.ThrowValueOutOfRangeException(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException - use it to assert an integer value within a certain range
            </summary>
            <param name="value">Value to put into the exception message</param>
            <param name="minValue">Min value to put into the exception message</param>
            <param name="maxValue">Max value to put into the exception message</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.RangeErrors.ThrowValueOutOfRangeException(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException - use it to assert a double value within a certain range
            </summary>
            <param name="value">Value to put into the exception message</param>
            <param name="minValue">Min value to put into the exception message</param>
            <param name="maxValue">Max value to put into the exception message</param>
            <param name="context">Additional context (optional)</param>
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.RangeErrors.ThrowValueHigherThanException(System.Int32,System.Int32,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException - use it to assert an integer value lower than a max value
            </summary>
            <param name="value">Value to put into the exception message</param>
            <param name="maxValue">Max value to put into the exception message</param>
            <param name="context">Additional context (optional)</param>     
        </member>
        <!-- Badly formed XML comment ignored for member "M:IVINET.Internal.ValueRangeAssertions.RangeErrors.ThrowValueHigherThanException(System.Double,System.Double,System.String)" -->
        <member name="M:IVINET.Internal.ValueRangeAssertions.RangeErrors.ThrowValueLowerThanException(System.Int32,System.Int32,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException - use it to assert an integer value higher than a min value
            </summary>
            <param name="value">Value to put into the exception message</param>
            <param name="minValue">Min value to put into the exception message</param>
            <param name="context">Additional context (optional)</param>     
        </member>
        <member name="M:IVINET.Internal.ValueRangeAssertions.RangeErrors.ThrowValueLowerThanException(System.Double,System.Double,System.String)">
            <summary>
            Throws Ivi.Driver.OutOfRangeException - use it to assert a double value higher than a min value
            </summary>
            <param name="value">Value to put into the exception message</param>
            <param name="minValue">Min value to put into the exception message</param>
            <param name="context">Additional context (optional)</param>     
        </member>
        <member name="P:IVINET.Internal.IInstrument.BinaryFloatNumbersFormat">
            <summary>
            Defines the coding of floating-point numbers in binary data
            </summary>
        </member>
        <member name="P:IVINET.Internal.IInstrument.BinaryIntegerNumbersFormat">
            <summary>
            Defines the coding of integer numbers in binary data
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.SetOpcTimeout(System.Nullable{System.Int32})">
            <summary>
            Sets new Instrument OPC Timeout in milliseconds and returns the old value.
            Values null, 0, or any negative number leave the OPC timeout unchanged
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.SetOpcTimeout(System.Nullable{Ivi.Driver.PrecisionTimeSpan})">
            <summary>
            Sets new Instrument OPC Timeout entered as PrecisionTimeSpan and returns the old value in milliseconds.
            Value of null leaves the OPC timeout unchanged
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.GetOpcTimeout">
            <summary>
            Returns the Instrument's OPC timeout in milliseconds
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryErrorsAll">
            <summary>
            Uses SYSTEM:ERROR? query in a loop to read and delete all the errors in the instrument's error queue
            If no error is present, the method returns an empty collection
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryErrorLast">
            <summary>
            Uses SYSTEM:ERROR? query to read and delete the last error in the instrument's error queue.
            If no error is present, the method returns {code=0, msg='No Error'}
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.Write(System.String)">
            <summary>
            Writes string command to the instrument
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.WriteWithWai(System.String)">
            <summary>
            Writes string command to the instrument
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.WriteWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Writes command with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.WriteWithOpc(System.String,System.Nullable{Ivi.Driver.PrecisionTimeSpan})">
            <summary>
            Writes command with OPC synchronization. If timeout is null, the current Opc Timeout is used
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.ReadUnknownLength">
            <summary>
            Reads all the available data as bytes from instrument
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryString(System.String)">
            <summary>
            Sends a query and reads response from the instrument. Removes trailing LineFeed characters
            The response length is unlimited.
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryStringWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Query with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used
            Also performs error checking if QueryInstrumentStatus is true.
            The response is trimmed of any trailing LF characters and has no length limit.
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryStringWithOpc(System.String,System.Nullable{Ivi.Driver.PrecisionTimeSpan})">
            <summary>
            Query response from instrument with OPC synchronization. If timeout is null, the current Opc Timeout is used
            Also performs error checking if QueryInstrumentStatus is true.
            The response is trimmed of any trailing LF characters and has no length limit.
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryInt32(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Int32
            Based on the RecogniseScalarNumberBinFormat the response can be in ASCII or Binary format (only in VXI-11 sessions)
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryInt32WithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends a query and reads response from the instrument as Int32 synchronised with OPC.
            Based on the RecogniseScalarNumberBinFormat the response can be in ASCII or Binary format (only in VXI-11 sessions)
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryInt64(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Int64
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryDouble(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Double
            Based on the RecogniseScalarNumberBinFormat the response can be in ASCII or Binary format  (only in VXI-11 sessions)
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryDoubleWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends a query and reads response from the instrument as Double synchronised with OPC.
            Based on the RecogniseScalarNumberBinFormat the response can be in ASCII or Binary format  (only in VXI-11 sessions)
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBoolean(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Boolean
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBooleanWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends a query and reads response from the instrument as Boolean synchronised with OPC.
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryStringArray(System.String)">
            <summary>
            Queries string of unknown size from instrument,
            and represents it as an array of comma-separated strings
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryAsciiDoubleArray(System.String,System.Nullable{System.Double})">
            <summary>
            Queries string of unknown size from instrument,
            and represents it as comma-separated double numbers
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryAsciiInt32Array(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries string of unknown size from instrument,
            and represents it as comma-separated int numbers.
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryAsciiBooleanArray(System.String)">
            <summary>
            Queries string of unknown size from instrument,
            and represents it as comma-separated booleans
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.WriteBinaryDataBlock(System.String,System.IO.Stream)">
            <summary>
            Writes all the stream data as binary data block to the instrument
            It sends the entered command, followed by the constructed binary data header
            and the binary data from the stream.
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.WriteBinaryDataBlock(System.String,System.Byte[])">
            <summary>
            Writes all the data as binary data block to the instrument
            It sends the entered command, followed by the constructed binary data header
            and the binary data from the binaryDataBlock input.
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBinaryDataBlock(System.String)">
            <summary>
            Queries binary data block to byte array
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBinaryDataBlock(System.String,System.IO.Stream)">
            <summary>
            Queries binary data block and returns it in the entered Stream.
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBinaryDataBlockWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Query binary data with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBinaryDataBlockWithOpc(System.String,System.IO.Stream,System.Nullable{System.Int32})">
            <summary>
            Query binary data with OPC synchronization, and returns it in the entered Stream. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBinaryOrAsciiFloatArray(System.String)">
            <summary>
            Queries an array of floating-point numbers that can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal double array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryFloatNumbersFormat, usually float 32-bit (FORM REAL,32).</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBinaryOrAsciiFloatArrayWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries an array of floating-point numbers with OPC sync. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            The numbers can be returned in ASCII format or in binary format. The array is always returned as the most-universal double array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryFloatNumbersFormat, usually float 32-bit (FORM REAL,32).</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBinaryOrAsciiIntegerArray(System.String)">
            <summary>
            Queries an array of integer numbers that can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal int32 array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryIntegerNumbersFormat, usually int 32-bit (FORM INT,32).</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryBinaryOrAsciiIntegerArrayWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries an array of integer numbers with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            The numbers can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal int32 array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryIntegerNumbersFormat, usually int 32-bit (FORM INT,32).</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryOpc">
            <summary>
            Sends *OPC? query and reads the result
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.QueryOpc(System.Int32)">
            <summary>
            Sends *OPC? query and reads the result.
            After the entered timeout in milliseconds, the method throws the Ivi.Driver.IOTimeoutException.
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.WriteStringToLog(System.String)">
            <summary>
            Writes string message to log
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.ClearStatus">
            <summary>
            Clears instrument's status subsystem
            </summary>
        </member>
        <member name="M:IVINET.Internal.IInstrument.SelfTest">
            <summary>
            Perform standard self test by sending *TST? query
            </summary>
        </member>
        <member name="T:IVINET.Internal.Instrument">
            <summary>
            Model of an Instrument with VISA interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.Instrument.Model">
            <summary>
            e.g. FSW or NRP. If InstrumentSettings.IdentificationModelFullName == true, the Model is FSW26 or NRP67A
            If one of the InstrumentSettings.ModelAliases fit, the Model will have the name of the alias
            In that case, the property ModelForErrMessages will have the value '%s'(Physical name '%s') e.g. 'FSW'(Physical name 'FSV3000')
            The purpose is for the driver to treat the FSV3000 exactly like the FSW, but still report the physical name in exception messages.
            </summary>
        </member>
        <member name="F:IVINET.Internal.Instrument.ModelForErrMessages">
            <summary>
            Instrument Model string used in all exception messages
            If no InstrumentSettings.ModelAliases fit, the ModelForErrMessages is '%s' where %s is Model
            If one of the Aliases fit, the ModelForErrMessages is '%s1'(Physical name '%s2') e.g. 'FSW'(Physical name 'FSV3000')
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.ViReadStbVisaTimeoutMs">
            <summary>
            Any positive number changes VISA Timeout for the duration of STB polling
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.SessionType">
            <summary>
            Session type: Gpib, Serial, Vxi11, Hislip, Socket, Usb
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.ReadDelay">
            <summary>
            Delay before each Read()
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.WriteDelay">
            <summary>
            Delay before each Write()
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.IdnString">
            <summary>
            Use only in Simulation mode. This sets/reads the instrument's *IDN? string.
            The *IDN? string is immediately parsed for properties Manufacturer, Model, SerialNumber, FirmwareRevision
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.Simulating">
            <summary>
            True: Instrument in simulation mode
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.VisaManufacturer">
            <summary>
            Manufacturer of VISA used by the instrument
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.InstrumentOptionsString">
            <summary>
            Simulation mode *OPT? response. This is set-only property to apply a new instrument options string.
            In real mode, the actual *OPT? response it parsed.
            The string is parsed with the parse mode defined in InstrumentProperties when initializing the Instrument.
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.VisaTimeoutMs">
            <summary>
            VISA Timeout
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.LoggingEnabled">
            <summary>
            Logging of the VISA communication
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.LoggingDebugMessages">
            <summary>
            Logger debug messages to include source information
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:IVINET.Internal.Instrument.BinaryFloatNumbersFormat">
            <summary>
            Defines the coding of floating-point numbers in binary data
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.BinaryIntegerNumbersFormat">
            <summary>
            Defines the coding of integer numbers in binary data
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.RecogniseScalarNumberBinFormat">
            <summary>
            If true (default value), the driver also recognises binary responses on scalar number queries (Int32 and Double)
            Only works in VXI-capable sessions. For non-VXI-capable sessions, this setting is coerced to false
            </summary>
        </member>
        <member name="P:IVINET.Internal.Instrument.InstrOptions">
            <summary>
            Instrument Options object for installed option-checking operations
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.#ctor(System.String,System.Boolean,IVINET.Internal.InstrumentSettings,System.Boolean)">
            <summary>
            Opening an instrument session. If simulate is true, it cannot be later switched to false anymore
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.ToString">
            <summary>
            String representation of the object: "Instrument {vendor}, {Session Kind}, '{resource name}'"
            </summary>        
        </member>
        <member name="M:IVINET.Internal.Instrument._QueryOptionsAndParse(IVINET.Internal.InstrOptionsParseMode)">
            <summary>
            Queries *OPT? and creates a new instance of the InstrumentOptions
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument._ParseIdnString(System.String)">
            <summary>
            Parse the *IDN? response to Manufacturer, Model, SerialNumber and FirmwareRevision
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument._ParseErrorQueryResponse(System.String)">
            <summary>
            Parses entered response string to ErrorQueryResult structure
            response is in a a form '-110,"Command error"'
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument._QueryBinaryDataBlock(System.String,System.Boolean,System.Boolean@)">
            <summary>
            Queries binary data block to byte array
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument._QueryBinaryDataBlockWithOpc(System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Query binary data with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.BinOrAsciiData_To_ScalarInteger(System.Byte[])">
            <summary>
            Converts input data to int32
            Recognises ASCII or BIN format
            In case of binary format, the decoding is defined by the BinaryIntegerNumbersFormat settings
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.BinOrAsciiData_To_ScalarFloat(System.Byte[])">
            <summary>
            Converts input data to double
            Recognises ASCII or BIN format
            In case of binary format, the decoding is defined by the BinaryFloatNumbersFormat settings
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.SetOpcTimeout(System.Nullable{System.Int32})">
            <summary>
            Sets new Instrument OPC Timeout in milliseconds and returns the old value.
            Values null, 0, or any negative number leave the OPC timeout unchanged
            Returns old OPC timeout in milliseconds
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.SetOpcTimeout(System.Nullable{Ivi.Driver.PrecisionTimeSpan})">
            <summary>
            Sets new Instrument OPC Timeout entered as PrecisionTimeSpan and returns the old value in milliseconds.
            Value of null leaves the OPC timeout unchanged
            Returns old OPC timeout in milliseconds
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.GetOpcTimeout">
            <summary>
            Returns the Instrument's OPC timeout in milliseconds
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.ResetRegistersEseSre">
            <summary>
            Resets the status of ESE and SRE registers to default values
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.FitsIdnPattern(System.Boolean,System.String[],System.String[])">
            <summary>
            Checks the instrument's IdnString against the provided patterns.
            Throws an exception, if none of the patterns in the array are found in the instrument's IdnString.
            If regex is false, the idnPatterns are searched literately. If it is true, each idnPatterns is considered to be a Regular expression.
            supportedInstrumentModels is a List of instrument models used only for exception message
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.FitsIdnPattern(System.Boolean,System.String,System.String[])">
            <summary>
            Checks the instrument's IdnString against the provided patterns.
            Throws an exception, if the idnPattern is not found in the instrument's IdnString.
            If regex is false, the idnPattern is searched literately. If it is true, the idnPattern is considered to be a Regular expression.
            supportedInstrumentModels is a List of instrument models used only for exception message
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryAndClearEsr">
            <summary>
            Sends "*ESR? query to reset the clear-on-read bits of the Event Status Register
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.SelfTest">
            <summary>
            Perform standard self test by sending *TST? query
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.DefaultCheckStatus">
            <summary>
            Throws InstrumentStatusException in case of an error in the instrument's error queue.
            The procedure is skipped, if the QueryInstrumentStatus is set to false.
            This method is called by Status.Check() by default if the delegate _checkStatusDelegate has not been changed.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.CheckStatus">
            <summary>
            Check status method to be used publicly
            It calls either DefaultCheckStatus() or another method if defined by SetNewCheckStatusDelegate()
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.SetNewCheckStatusDelegate(IVINET.Internal.CheckStatusDelegate)">
            <summary>
            Assigning a new Check status delegate. If you enter null, the default one is used
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.IsInstrumentModel(System.String)">
            <summary>
            Returns true, if the current instrument model fits the entered string
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.ClearStatus">
            <summary>
            Clears instrument's status subsystem
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.Reset">
            <summary>
            Sends *RST to the instrument
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryErrorsAll">
            <summary>
            Uses SYSTEM:ERROR? query in a loop to read and delete all the errors in the instrument's error queue
            If no error is present, the method returns an empty collection
            Returns a collection of all read errors
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryErrorLast">
            <summary>
            Uses SYSTEM:ERROR? query to read and delete the last error in the instrument's error queue.
            If no error is present, the method returns {code=0, msg='No Error'}
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.Write(System.String)">
            <summary>
            Writes string command to the instrument
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.WriteWithWai(System.String)">
            <summary>
            Writes string command to the instrument
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.WriteWithOpc(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Writes command with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.WriteWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Writes command with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.WriteWithOpc(System.String,System.Nullable{Ivi.Driver.PrecisionTimeSpan})">
            <summary>
            Writes command with OPC synchronization. If timeout is null, the current Opc Timeout is used
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.ReadUnknownLength">
            <summary>
            Reads all the available data as bytes from instrument
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.Query(System.String)">
            <summary>
            Sends a query and reads the raw response from the instrument.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryString(System.String)">
            <summary>
            Sends a query and reads the response from the instrument.
            The response is trimmed of any trailing LF characters and has no length limit.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryWithOpc(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Queries raw data with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used
            Also performs error checking if QueryInstrumentStatus is true
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryStringWithOpc(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Query string with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used
            Also performs error checking if QueryInstrumentStatus is true
            The response is trimmed of any trailing LF characters and has no length limit.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryStringWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Query with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used
            Also performs error checking if QueryInstrumentStatus is true.
            The response is trimmed of any trailing LF characters and has no length limit.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryStringWithOpc(System.String,System.Nullable{Ivi.Driver.PrecisionTimeSpan})">
            <summary>
            Query response from instrument with OPC synchronization. If timeout is null, the current Opc Timeout is used
            Also performs error checking if QueryInstrumentStatus is true.
            The response is trimmed of any trailing LF characters and has no length limit.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryInt32(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Int32.
            Based on the RecogniseScalarNumberBinFormat the response can be in ASCII or Binary format (only in VXI-11 sessions)
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryInt32WithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends a query and reads response from the instrument as Int32 synchronised with OPC.
            Based on the RecogniseScalarNumberBinFormat the response can be in ASCII or Binary format (only in VXI-11 sessions)
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryInt64(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Int64
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryDouble(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Double.
            Based on the RecogniseScalarNumberBinFormat the response can be in ASCII or Binary format (only in VXI-11 sessions)
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryDoubleWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends a query and reads response from the instrument as Double synchronised with OPC.
            Based on the RecogniseScalarNumberBinFormat the response can be in ASCII or Binary format (only in VXI-11 sessions)
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBoolean(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Boolean
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBooleanWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends a query and reads response from the instrument as Boolean synchronised with OPC.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryStringArray(System.String)">
            <summary>
            Queries string of unknown size from instrument,
            and represents it as an array of comma-separated strings
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryAsciiDoubleArray(System.String,System.Nullable{System.Double})">
            <summary>
            Queries string of unknown size from instrument,
            and represents it as comma-separated double numbers
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryAsciiInt32Array(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries string of unknown size from instrument,
            and represents it as comma-separated int numbers.
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryAsciiBooleanArray(System.String)">
            <summary>
            Queries string of unknown size from instrument,
            and represents it as comma-separated booleans
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.WriteBinaryDataBlock(System.String,System.IO.Stream)">
            <summary>
            Writes all the stream data as binary data block to the instrument
            It sends the entered command, followed by the constructed binary data header and the binary data from the stream.
            Enter the command without the binary data header
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.WriteBinaryDataBlock(System.String,System.Byte[])">
            <summary>
            Writes all the data as binary data block to the instrument
            It sends the entered command, followed by the constructed binary data header
            and the binary data from the binaryDataBlock input.
            Enter the command without the binary data header
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryDataBlock(System.String)">
            <summary>
            Queries binary data block to byte array
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryDataBlock(System.String,System.IO.Stream)">
            <summary>
            Queries binary data block and returns it in the entered Stream.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryDataBlockWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Query binary data with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryDataBlockWithOpc(System.String,System.IO.Stream,System.Nullable{System.Int32})">
            <summary>
            Query binary data with OPC synchronization, and returns it in the entered Stream. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            Also performs error checking if the property QueryInstrumentStatus is set to true
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryOrAsciiFloatArray(System.String,IVINET.Internal.InstrBinaryFloatNumbersFormat)">
            <summary>
            Queries an array of floating-point numbers that can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal double array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the entered format.</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryOrAsciiFloatArray(System.String)">
            <summary>
            Queries an array of floating-point numbers that can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal double array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryFloatNumbersFormat, usually float 32-bit (FORM REAL,32).</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryOrAsciiFloatArrayWithOpc(System.String,IVINET.Internal.InstrBinaryFloatNumbersFormat,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Queries an array of floating-point numbers with OPC sync. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            The numbers can be returned in ASCII format or in binary format. The array is always returned as the most-universal double array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on entered format.</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryOrAsciiFloatArrayWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries an array of floating-point numbers with OPC sync. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            The numbers can be returned in ASCII format or in binary format. The array is always returned as the most-universal double array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryFloatNumbersFormat, usually float 32-bit (FORM REAL,32).</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryOrAsciiIntegerArray(System.String,IVINET.Internal.InstrBinaryIntegerNumbersFormat)">
            <summary>
            Queries an array of integer numbers that can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal int32 array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the entered format</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryOrAsciiIntegerArray(System.String)">
            <summary>
            Queries an array of integer numbers that can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal int32 array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryIntegerNumbersFormat, usually int 32-bit (FORM INT,32).</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryOrAsciiIntegerArrayWithOpc(System.String,IVINET.Internal.InstrBinaryIntegerNumbersFormat,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Queries an array of integer numbers with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            The numbers can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal int32 array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the entered format.</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryBinaryOrAsciiIntegerArrayWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries an array of integer numbers with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            The numbers can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal int32 array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryIntegerNumbersFormat, usually int 32-bit (FORM INT,32).</para>
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryOpc">
            <summary>
            Sends *OPC? query and reads the result
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.QueryOpc(System.Int32)">
            <summary>
            Sends *OPC? query and reads the result.
            After the entered timeout in milliseconds, the method throws the Ivi.Driver.IOTimeoutException.
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.AddLogger(System.IO.Stream)">
            <summary>
            Add new StreamWriter listener
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.RemoveLogger(System.IO.Stream)">
            <summary>
            Remove StreamWriter listener
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.WriteStringToLog(System.String)">
            <summary>
            Writes string message to log
            </summary>
        </member>
        <member name="M:IVINET.Internal.Instrument.Close">
            <summary>
            Close communication
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentOptions._optionsList">
            <summary>
            Option strings sorted by the option number in the list
            </summary>
        </member>
        <member name="P:IVINET.Internal.InstrumentOptions.HasK0">
            <summary>
            True if the options contain K0
            </summary>
        </member>
        <member name="P:IVINET.Internal.InstrumentOptions.AllowK0Override">
            <summary>
            If true, and HasK0 is true, every K0 option will be reported as available
            </summary>
        </member>
        <member name="P:IVINET.Internal.InstrumentOptions.CurrentModel">
            <summary>
            Current instrument model name
            </summary>
        </member>
        <member name="P:IVINET.Internal.InstrumentOptions.CurrentModelForErrMsg">
            <summary>
            Current instrument model appearing in exception messages
            Mostly it is equal to the CurrentModel, but if aliases are used, this string contains the real instrument model name
            </summary>
        </member>
        <member name="P:IVINET.Internal.InstrumentOptions.EmptyOptions">
            <summary>
            Returns true, if the entered options string was empty
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentOptions._globalOptions">
            <summary>
            Global Options pattern, no instrument definition e.g.: '(K1|K2|K3)'
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentOptions._globalOptionsNoBrackets">
            <summary>
            Global Options pattern, no instrument definition, no brackets e.g.: 'K1|K2|K3'
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentOptions._limitedOptions">
            <summary>
            Model-specific pattern, with instrument model e.g.: 'FSW(K1|K2|K3)'
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:IVINET.Internal.InstrumentOptions._coreOptExprs" -->
        <member name="F:IVINET.Internal.InstrumentOptions._optionCleaner">
            <summary>
            Used for Cleaning single option string: 'K30'->'K30' 'SMW-K30'->'K30'
            </summary>
        </member>
        <member name="M:IVINET.Internal.InstrumentOptions.#ctor(System.String,System.Boolean,System.String,System.String,IVINET.Internal.InstrOptionsParseMode)">
            <summary>
            Initializes an instance with initial optionsString parsed
            </summary>
            <param name="optionsString">Option string returned by the *OPT? query</param>
            <param name="allowK0Override">Allowing HasK0 to have an effect</param>
            <param name="currentModel">Current instrument model</param>
            <param name="currentModelForErrMsg">Current instrument model used in exception messages</param>
            <param name="mode"> Select how to parse each element</param>
        </member>
        <member name="M:IVINET.Internal.InstrumentOptions.ToString">
            <summary>
            Represent the object as comma-separated string
            </summary>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.InstrumentOptions._InitializeFromString(System.String,IVINET.Internal.InstrOptionsParseMode)">
            <summary>
            Parses options string into a string List.
            It removes double-entries, trims the white spaces and quotations marks.
            Sorts the option by the number, starting with K0, K1, K2, ... K2000, then B0, B1 ... B2000
            </summary>
            <param name="optionsString">option string returned by the *OPT? query</param>
            <param name="mode"> Select how to parse each element</param>
            <returns>Options List</returns>
        </member>
        <member name="M:IVINET.Internal.InstrumentOptions._ClearOption(System.String)">
            <summary>
            Clears option string: 'K30'->'K30' 'SMW-K30'->'K30'
            Also removes start/end brackets '(' and ')'
            </summary>
            <param name="option"></param>
        </member>
        <member name="M:IVINET.Internal.InstrumentOptions.SimpleIsAvailable(System.String)">
            <summary>
            Returns true, if the entered option is available.
            It can only be a simple single expression e.g.: K10
            Can not contain limited option expression e.g.: FSW(K30)|FSVP(K31)
            </summary>
            <param name="option">Single option to check for presence</param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.InstrumentOptions.SimpleIsMissing(System.String)">
            <summary>
            Returns true, if the entered option is missing.
            Can not contain limited option expression e.g.: FSW(K30)|FSVP(K31)
            </summary>
            <param name="option">Option to check for presence</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:IVINET.Internal.InstrumentOptions._FulfillsOptionsExpr(System.String)" -->
        <member name="M:IVINET.Internal.InstrumentOptions.GetAll">
            <summary>
            Returns all the options
            </summary>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.InstrumentOptions.AssertHasSimpleOption(System.String)">
            <summary>
            Throws Ivi.Driver.OptionMissingException() if the entered option is missing
            Only accepts simple option string, e.g.: 'K30'
            </summary>
        </member>
        <member name="M:IVINET.Internal.InstrumentOptions.AssertHasSimpleOption(System.String[])">
            <summary>
            Throws Ivi.Driver.OptionMissingException() if none of the entered options are present
            Only accepts simple option strings, e.g.: 'K30'
            </summary>
            <param name="options">Array with option string alternatives</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:IVINET.Internal.InstrumentOptions.AssertHasComplexOptions(System.String,System.String)" -->
        <member name="M:IVINET.Internal.InstrumentOptions.AssertIsModel(System.String,System.String)">
            <summary>
            Checks if the entered supportedModels fulfill the current model.
            Throws OperationNotSupportedException if not.
            </summary>
            <param name="supportedModels">Supported models expression e.g. 'FSW|FSV|FSVR'. Can be null (supports all)</param>
            <param name="context">Context text for the exception message</param>
        </member>
        <member name="M:IVINET.Internal.InstrumentOptions.AssertModelAndOptions(System.String,System.String,System.String)">
            <summary>
            Checks the complicated option expression including models and global/limited options
            Used in checking Attribute's support.
            </summary>
            <param name="supportedModels">Supported models expression e.g. 'FSW|FSV|FSVR' Can be null (supports all)</param>
            <param name="complexOptionsExpr">Supported options expression e.g.: 'FSW(K30)|FSVP(K31)'</param>
            <param name="context">Context text for the exception message</param>
        </member>
        <member name="M:IVINET.Internal.InstrumentOptions._ThrowOptionMissing(System.String,System.String)">
            <summary>
            Throws Ivi.Driver.OptionMissingException - use it to assert an option installed
            </summary>
            <param name="requiredOptions">Option(s) required for an operation</param>
            <param name="context">Context for the exception</param>
        </member>
        <member name="T:IVINET.Internal.WaitForOpcMode">
            <summary>
            Defines OPC waiting mode used by Instrument
            </summary>
        </member>
        <member name="F:IVINET.Internal.WaitForOpcMode.StbPolling">
            <summary>
            polling of the ReadSTB (VXI session) or *STB? (non-VXI session)
            </summary>
        </member>
        <member name="F:IVINET.Internal.WaitForOpcMode.StbPollingSlow">
            <summary>
            Same as StbPolling, but with bigger polling pauses
            </summary>
        </member>
        <member name="F:IVINET.Internal.WaitForOpcMode.StbPollingSuperSlow">
            <summary>
            Same as StbPolling, but with even bigger polling pauses
            </summary>
        </member>
        <member name="F:IVINET.Internal.WaitForOpcMode.ServiceRequest">
            <summary>
            Service request mechanism with waiting for service request event
            </summary>
        </member>
        <member name="F:IVINET.Internal.WaitForOpcMode.OpcQuery">
            <summary>
            *OPC? polling
            </summary>
        </member>
        <member name="T:IVINET.Internal.InstrBinaryFloatNumbersFormat">
            <summary>
            Defines the coding of instrument's floating-point numbers in binary data
            Swapped means the endianness of the instrument is different from endianness of the Control PC
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrBinaryFloatNumbersFormat.Single_4bytes">
            <summary>
            4 bytes/number (FORMAT REAL,32)
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrBinaryFloatNumbersFormat.Single_4bytesSwapped">
            <summary>
            4 bytes/number (FORMAT REAL,32) swapped endianness
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrBinaryFloatNumbersFormat.Double_8bytes">
            <summary>
            8 bytes/number (FORMAT REAL,64 or FORMAT REAL)
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrBinaryFloatNumbersFormat.Double_8bytesSwapped">
            <summary>
            8 bytes/number (FORMAT REAL,64 or FORMAT REAL) swapped endianess
            </summary>
        </member>
        <member name="T:IVINET.Internal.InstrBinaryIntegerNumbersFormat">
            <summary>
            Defines the coding of instrument's integer numbers in binary data
            Swapped means the endianness of the instrument is different from endianness of the Control PC
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrBinaryIntegerNumbersFormat.Integer32_4bytes">
            <summary>
            4 bytes/number (FORMAT INT,32)
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrBinaryIntegerNumbersFormat.Integer32_4bytesSwapped">
            <summary>
            4 bytes/number (FORMAT INT,32) swapped endianness
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrBinaryIntegerNumbersFormat.Integer16_2bytes">
            <summary>
            2 bytes/number (FORMAT INT,16)
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrBinaryIntegerNumbersFormat.Integer16_2bytesSwapped">
            <summary>
            2 bytes/number (FORMAT INT,16) swapped endianness
            </summary>
        </member>
        <member name="T:IVINET.Internal.InstrOptionsParseMode">
            <summary>
            Mode to use for parsing the instrument's option string (*OPT? response)
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrOptionsParseMode.Skip">
            <summary>
            No options reading / parsing / applying
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrOptionsParseMode.KeepOriginal">
            <summary>
            No parsing, just trimming white spaces
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrOptionsParseMode.KeepBeforeDash">
            <summary>
            If dash is present, only the the part before dash is kept e.g. 'K200-FSH' => 'K200'
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrOptionsParseMode.KeepAfterDash">
            <summary>
            If dash is present, only the part after dash is kept e.g. 'SMU200-K1' => 'K1'
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrOptionsParseMode.Auto">
            <summary>
            Parses the option automatically - takes the portion before or after dash depending on sucessfull parsing K/B
            </summary>
        </member>
        <member name="T:IVINET.Internal.InstrViClearMode">
            <summary>
            Conditions to send ViClear() command
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.None">
            <summary>
            No ViClear
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.IgnoreError">
            <summary>
            If an error occurs, it is ignored
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.ExecuteOnAll">
            <summary>
            Perform on all interfaces
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.ExecuteOnSocket">
            <summary>
            Perform on Socket interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.ExecuteOnSerial">
            <summary>
            Perform on USB interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.ExecuteOnUsb">
            <summary>
            Perform on USB interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.ExecuteOnGpib">
            <summary>
            Perform on GPIB interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.ExecuteOnTcpVxi">
            <summary>
            Perform on TCP-IP Vxi-11 interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.ExecuteOnHiSlip">
            <summary>
            Perform on TCP-IP HiSLIP interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.BlockOnSocket">
            <summary>
            Block on Socket interface - Blocking flag has higher priority than Execute
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.BlockOnSerial">
            <summary>
            Block on USB interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.BlockOnUsb">
            <summary>
            Block on USB interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.BlockOnGpib">
            <summary>
            Block on GPIB interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.BlockOnTcpVxi">
            <summary>
            Block on TCP-IP Vxi-11 interface
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrViClearMode.BlockOnHiSlip">
            <summary>
            Block on TCP-IP HiSLIP interface
            </summary>
        </member>
        <member name="T:IVINET.Internal.InstrDefinedInString">
            <summary>
            Flag set means the token was defined in the input options string for method ApplyOptionSettings()
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.None">
            <summary>
            No token used in the options string
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.ReadDelay">
            <summary>
            DRIVERSETUP_READDELAY
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.WriteDelay">
            <summary>
            DRIVERSETUP_WRITEDELAY
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.OpcWaitMode">
            <summary>
            DRIVERSETUP_OPCWAITMODE
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.AddTermCharToWriteBinBlock">
            <summary>
            DRIVERSETUP_ADDTERMCHARTOWRITEBINBLOCK
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.AssureWriteWithLF">
            <summary>
            DRIVERSETUP_ASSUREWRITEWITHLF
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.IOsegmentSize">
            <summary>
            DRIVERSETUP_IOSEGMENTSIZE
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.OpcTimeout">
            <summary>
            DRIVERSETUP_OPCTIMEOUT
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.VisaTimeoutMilliseconds">
            <summary>
            DRIVERSETUP_VISATIMEOUT
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.PreferRsVisa">
            <summary>
            DRIVERSETUP_PREFERRSVISA
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.ViClearExeMode">
            <summary>
            DRIVERSETUP_VICLEAREXEMODE
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.ViReadStbVisaTimeout">
            <summary>
            DRIVERSETUP_VIREADSTBVISATIMEOUT
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.LoggingEnabled">
            <summary>
            DRIVERSETUP_LOGGING
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.LoggingDebug">
            <summary>
            DRIVERSETUP_LOGGING_DEBUG
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.LoggingMaxBinEntryLength">
            <summary>
            DRIVERSETUP_LOGGING_MAXBINENTRYLENGTH
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.LoggingMaxAsciiEntryLength">
            <summary>
            DRIVERSETUP_LOGGING_MAXASCIIENTRYLENGTH
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.RecogniseScalarNumberBinFormat">
            <summary>
            DRIVERSETUP_RECOGNISESCALARNUMBERBINFORMAT
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.AssureResponseEndWithLf">
            <summary>
            DRIVERSETUP_ASSURERESPONSEENDWITHLF
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.AllowK0Override">
            <summary>
            DRIVERSETUP_ALLOWK0OVERRIDE
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.OpcSyncAttrQueries">
            <summary>
            DRIVERSETUP_OPCSYNCATTRQUERIES
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrDefinedInString.OpcSyncAttrWrites">
            <summary>
            DRIVERSETUP_OPCSYNCATTRWRITES
            </summary>
        </member>
        <member name="T:IVINET.Internal.NonVxiSessionKinds">
            <summary>
            Flags defining forced Non-Vxi Session. Used for some instruments where a session does not properly fullfills
            all the necessary VXI-11 features
            </summary>
        </member>
        <member name="F:IVINET.Internal.NonVxiSessionKinds.Default">
            <summary>
            Default - non-VXI sessions are always SOCKET and ASRL
            </summary>
        </member>
        <member name="F:IVINET.Internal.NonVxiSessionKinds.Usb">
            <summary>
            Force false for USB-TMC
            </summary>
        </member>
        <member name="F:IVINET.Internal.NonVxiSessionKinds.TpcVxi">
            <summary>
            Force false for LAN
            </summary>
        </member>
        <member name="F:IVINET.Internal.NonVxiSessionKinds.Hislip">
            <summary>
            Force false for HISLIP
            </summary>
        </member>
        <member name="F:IVINET.Internal.NonVxiSessionKinds.Gpib">
            <summary>
            Force false for GPIB
            </summary>
        </member>
        <member name="T:IVINET.Internal.InstrumentSettings">
            <summary>
            Defines session-specific settings used by the Instrument class
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.WriteDelay">
            <summary>
            Delay before each Write (not valid for segmented writes)
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.ReadDelay">
            <summary>
            Delay before each Read (not valid for segmented reads)
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.ViClearExeMode">
            <summary>
            Mode upon which to perform viClear() after viOpen - you can use logical OR to combine the value
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.OpcWaitMode">
            <summary>
            Wait for OPC mode, will be coerced if the communication interface does not support it
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.IOsegmentSize">
            <summary>
            Maximum read/write segment size when communicating with the instrument
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.OpcTimeout">
            <summary>
            OPC timeout in milliseconds for all write/read with OPC sync operations
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.VisaTimeoutMilliseconds">
            <summary>
            VISA timeout in milliseconds for all VISA operations
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.PreferRsVisa">
            <summary>
            If true, RS VISA is preferred. If false, System Default VISA is chosen
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.AddTermCharToWriteBinBlock">
            <summary>
            If true, writing of binary data block to the instrument is ended with LF. Coerced to true for SOCKET and ASRL sessions
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.AssureWriteWithLF">
            <summary>
            If true, every write string is checked for LF at the end. If LF is missing, it is added.
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.SelfTestTimeout">
            <summary>
            Timeout for Self-test procedure
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.OptionsParseMode">
            <summary>
            Parsing mode for the *OPT? response
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.IdentificationModelFullName">
            <summary>
            If true, the instrument Model has the full *IDN? query name (e.g. "NRP2").
            If false, the name has only the A-Z prefix (e.g. "NRP") </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.LoggingEnabled">
            <summary>
            If true, the IO communication logging is enabled
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.LoggingDebug">
            <summary>
            If true, the IO communication logging has more detailed format including source code lines
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.LoggingMaxAsciiEntryLength">
            <summary>
            Maximal length of an ASCII IO communication logging entry until the middle part is truncated
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.LoggingMaxBinEntryLength">
            <summary>
            Maximal length of a binary IO communication logging entry until the middle part is truncated
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.BinaryFloatNumbersFormat">
            <summary>
            Defines binary data coding of instrument's floating-point numbers - used by all methods that decode binary data to an array of floating-point numbers.
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.BinaryIntegerNumbersFormat">
            <summary>
            Defines binary data coding of instrument's integer numbers - used by all methods that decode binary data to an array of integer numbers.
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.ViReadStbVisaTimeout">
            <summary>
            If True, during STB polling sets the VISA Timeout to a small number (under 1secs) to avoid long waiting times by some instruments
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.VxiCapable">
            <summary>
            If True, during STB polling sets the VISA Timeout to a small number (under 1secs) to avoid long waiting times by some instruments
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.DefinedInString">
            <summary>
            Flag set means the token was defined in the input options string for method ApplyOptionSettings()
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.NonVxiSessions">
            <summary>
            Flags defining forced Non-Vxi Session. Used for some instruments where a session does not properly fullfills
            all the necessary VXI-11 features
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.AllowK0override">
            <summary>
            If true, and HasK0 is true, every K-option will be reported as available
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.OpcSyncAttrQueries">
            <summary>
            If true, any attribute that is OPC-synchronized also uses OPC-sync for queries. Otherwise the queries are always standard queries.
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.OpcSyncAttrWrites">
            <summary>
            If true, any attribute that is OPC-synchronized also uses OPC-sync for writes. Otherwise the writes are always standard writes.
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.ModelAliases">
            <summary>
            List of aliases for instrument models
            Aliases expression can be used for mapping purposes.
            The Instrument.FullInstrumentModelName is matched for [physical_device_Regex]
            If matched, the Instrument.Model is changed to [alias]
            Syntax:
            [physical_device_Regex] -> [alias]
            Examples:
            To have FSWP-33 to be treated by the driver as FSVR:
            ^FSWP-33$ -> FSVR
            any FSVA to be treated as FSV:
            ^FSVA-[0-9]+$ -> FSV
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.RecogniseScalarNumberBinFormat">
            <summary>
            If set to true (default value), the driver also recognises binary responses on scalar number queries (Int32 and Double)
            Only works in VXI-capable sessions. For non-VXI-capable sessions, this setting is coerced to false
            </summary>
        </member>
        <member name="F:IVINET.Internal.InstrumentSettings.AssureResponseEndWithLf">
            <summary>
            If set to true (default value), each VISA read must end with LF character. If not, the reading continues
            </summary>
        </member>
        <member name="M:IVINET.Internal.InstrumentSettings.#ctor(IVINET.Internal.InstrViClearMode,System.Boolean,System.Int32,System.Int32,System.Int32,IVINET.Internal.WaitForOpcMode,System.Int32,System.Int32,System.Int32,IVINET.Internal.InstrOptionsParseMode,IVINET.Internal.InstrBinaryFloatNumbersFormat,IVINET.Internal.InstrBinaryIntegerNumbersFormat,IVINET.Internal.NonVxiSessionKinds,System.Boolean)">
            <summary>
            Constructor with all mandatory parameters
            </summary>
            <param name="viClearExeMode"></param>
            <param name="identificationModelFullName"></param>
            <param name="writeDelay"></param>
            <param name="readDelay"></param>
            <param name="ioSegmentSize"></param>
            <param name="opcWaitMode"></param>
            <param name="opcTimeout"></param>
            <param name="visaTimeoutMilliseconds"></param>
            <param name="selfTestTimeout"></param>
            <param name="optionsParseMode"></param>
            <param name="binaryFloatNumbersFormat"></param>
            <param name="binaryIntegerNumbersFormat"></param>
            <param name="nonVxiSessions"></param>
            <param name="opcSyncAttrQueries"></param>
        </member>
        <member name="M:IVINET.Internal.InstrumentSettings.AddModelAlias(System.String)">
            <summary>
            Adds a model alias expression
            Syntax:
            [physical_device_Regex] -> [alias]
            Examples:
            To have FSWP-33 to be treated by the driver as FSVR:
            ^FSWP-33$ -> FSVR
            any FSVA to be treated as FSV:
            ^FSVA-[0-9]+$ -> FSV
            <para>If you specify a capturing group, the error message value will contain the value in that capturing group.</para>
            </summary>
            <param name="aliasExpr"></param>
        </member>
        <member name="M:IVINET.Internal.InstrumentSettings.ApplyOptionSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Apply settings to Property fields
            </summary>
            <param name="settings">Settings in Dictionary. Only the relevant ones for InstrumentProperties are set</param>>
        </member>
        <member name="T:IVINET.Internal.IRepCapValue">
            <summary>
            Base interface of Repeated Capability values
            </summary>
        </member>
        <member name="P:IVINET.Internal.IRepCapValue.RepCapName">
            <summary>
            Name of the RepCap e.g. 'Window'
            </summary>
        </member>
        <member name="P:IVINET.Internal.IRepCapValue.RepCapKey">
            <summary>
            RepCap Key value e.g. 'Win1'
            </summary>
        </member>
        <member name="P:IVINET.Internal.IRepCapValue.Parent">
            <summary>
            Parent RepCap
            </summary>
        </member>
        <member name="T:IVINET.Internal.RangeTableCoerced">
            <summary>
            Range table for coerced range values
            </summary>
        </member>
        <member name="F:IVINET.Internal.RangeTableCoerced.Units">
            <summary>
            Optional field - units.
            Default value: null
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableCoerced.#ctor(System.Double[],System.String)">
            <summary>
            Constructor for 'Coerced' RangeTable including units
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableCoerced.#ctor(System.Double[])">
            <summary>
            Constructor for 'Coerced' RangeTable
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableCoerced.Coerce(System.Double)">
            <summary>
            Coerces the value to the coerce table
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableCoerced.Coerce(IVINET.Internal.Attr,System.Object)">
            <summary>
            Default actions for coercing a value
            Supported attributes data types: Real64, Int32, Int64
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableCoerced.Coerce(IVINET.Internal.Attr,System.Int32)">
            <summary>
            int32 - specific coercing, only works with int32 attribute data types
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableCoerced.Coerce(IVINET.Internal.Attr,System.Double)">
            <summary>
            double - specific coercing, only works with double attribute data types
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableCoerced.Coerce(IVINET.Internal.Attr,System.Int64)">
            <summary>
            long - specific coercing, only works with int64 attribute data types
            </summary>
        </member>
        <member name="T:IVINET.Internal.RangeTableDiscrete`1">
            <summary>
            Range table for discrete values
            </summary>
        </member>
        <member name="P:IVINET.Internal.RangeTableDiscrete`1.EnumType">
            <summary>
            Gets the type of the enum.
            </summary>
        </member>
        <member name="P:IVINET.Internal.RangeTableDiscrete`1.Generic">
            <summary>
            Range Table with generic Enum values
            </summary>
        </member>
        <member name="F:IVINET.Internal.RangeTableDiscrete`1._entriesShort">
            <summary>
            Entries where the string values are shortened (removed lower-case values)
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableDiscrete`1.#ctor(System.Collections.Generic.Dictionary{`0,System.String})">
            <summary>
            Constructor for 'Discrete' RangeTable
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableDiscrete`1.#ctor(System.Collections.Generic.Dictionary{`0,System.String},System.Boolean,System.Type)">
            <summary>
            Private constructor for generic Enum RangeTable
            </summary>
        </member>
        <member name="P:IVINET.Internal.RangeTableDiscrete`1.ItemsCount">
            <summary>
             Returns number of items in the range table.
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableDiscrete`1._InitEntriesShort">
            <summary>
            Initiates short version of the cmdStrings
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableDiscrete`1.GetCmdString(`0)">
            <summary>
            Returns command string corresponding to the entered enum value.
            Used in sending attribute commands with Enum data types.
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableDiscrete`1.GetEnumValue(System.String)">
            <summary>
            Searches the RangeTable and returns the Enum value corresponding to the entered command string.
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableDiscrete`1._GetGenericRt">
            <summary>
            Returns the RangeTableDiscrete of a generic Enum type - used for the attribute Range tables
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableDiscrete`1.Check(IVINET.Internal.Attr,`0)">
            <summary>
            Checks whether the entered value is found in the range table numeric values
            </summary>
        </member>
        <member name="T:IVINET.Internal.RangeTableRanged">
            <summary>
            Range table for ranged values
            </summary>
        </member>
        <member name="F:IVINET.Internal.RangeTableRanged.Min">
            <summary>
            Minimum limit
            </summary>
        </member>
        <member name="F:IVINET.Internal.RangeTableRanged.Max">
            <summary>
            Maximum limit
            </summary>
        </member>
        <member name="F:IVINET.Internal.RangeTableRanged.Units">
            <summary>
            Optional field - units.
            Default value: null
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableRanged.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor for 'Ranged' RangeTable with integer 32 numbers
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableRanged.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor for integer 'Ranged' RangeTable with integer 32 numbers including units
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableRanged.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructor for 'Ranged' RangeTable with integer 64 numbers
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableRanged.#ctor(System.Int64,System.Int64,System.String)">
            <summary>
            Constructor for integer 'Ranged' RangeTable with integer 64 numbers including units
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableRanged.#ctor(System.Double,System.Double)">
            <summary>
            Constructor for 'Ranged' RangeTable double without units
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableRanged.#ctor(System.Double,System.Double,System.String)">
            <summary>
            Constructor for double 'Ranged' RangeTable double including units
            </summary>
        </member>
        <member name="M:IVINET.Internal.RangeTableRanged.CheckRange(IVINET.Internal.Attr,System.Object)">
            <summary>
            Checks value against the defined range
            Value type could be Int32, Int64, Real64
            </summary>
        </member>
        <member name="T:IVINET.Internal.RepCap">
             <summary>
             Repeated capability class containing:
             - Name of the Repeated Capability
             - Pairs of name and keys/values pairs in a dictionary
            
             The dictionary does not use the RepCapItem, because it is not necessary to store the same name with each item.
             It is also much faster to search for the key or value in the dictionary with basic types.
             </summary>
        </member>
        <member name="F:IVINET.Internal.RepCap._repCapPairs">
            <summary>
            List of allowed repeated capability keys -> values
            </summary>
        </member>
        <member name="P:IVINET.Internal.RepCap.Name">
            <summary>
            Name of repeated capability
            </summary>
        </member>
        <member name="P:IVINET.Internal.RepCap.CaseInsensitive">
            <summary>
            If true, the recognition of the allowedKeys is case-insensitive.
            Default value is False;
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCap.#ctor(System.String,System.String[],System.String[],System.Boolean)">
            <summary>
            Initialized from the RcManagerEx. You can choose the case-sensitivity.
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCap.#ctor(System.String,System.String[],System.String[])">
            <summary>
            Initialized from the RcManagerEx. Case-sensitive.
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCap.ToString">
            <summary>
            Displaying the object as: "Channel: 5 values - 'CH0', 'CH1', 'CH2', 'CH3', 'CH4'
            </summary>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.RepCap.GetKeysList">
            <summary>
            Returns quoted Keys list in " | " separated string
            e.g. "CH0 | CH1 | CH2 | CH3"
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCap.Check(System.String)">
            <summary>
            Returns true, if the RepCap key exists.
            Virtual key names are not considered, they are solved already in the RepCapGroup class.
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCap.Create(System.String,System.String)">
            <summary>
            Creates a new RepCap key with the value
            If it already exists, no changes are made
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCap.Remove(System.String)">
            <summary>
            Removes the RepCap key
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCap.Clear">
            <summary>
            Clears all the RepCap keys
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCap.GetValue(System.String)">
            <summary>
            Returns the value of the RepCap key
            <para>!!! Does not resolve the Virtual Names !!!</para>
            </summary>
        </member>
        <member name="P:IVINET.Internal.RepCap.Count">
            <summary>
            Returns number of pairs Key/Value
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCap.GetEnumerator">
            <summary>
            Enumerator for the RepCap keys Dictionary
            </summary>
        </member>
        <member name="T:IVINET.Internal.RepCapGroup`2">
            <summary>
            Repeated capability attached to an interface T, which creates an array of these interfaces with string indexers equal to RepCap Key values
            Example: Timegate = new RepCapGroup{IRsPwrMeterChannelTimegate}(RepCapNames.Timegate, this, RohdeSchwarz.RsPwrMeter.RsPwrMeterChannelTimegate.Create, core);
            Usage: a.Timegate["TG1"]
            </summary>
        </member>
        <member name="F:IVINET.Internal.RepCapGroup`2._dict">
            <summary>
            Dictionary of interfaces of repeated capabilities and keys (key => C)
            </summary>
        </member>
        <member name="F:IVINET.Internal.RepCapGroup`2._owner">
            <summary>
            Interface who owns repeated capability
            </summary>
        </member>
        <member name="F:IVINET.Internal.RepCapGroup`2._core">
            <summary>
            Core
            </summary>        
        </member>
        <member name="F:IVINET.Internal.RepCapGroup`2._createClass">
            <summary>
            Delegate for creating class with implemented interface T
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapGroup`2.#ctor(System.String,IVINET.Internal.IRepCapValue,IVINET.Internal.CreateClass,IVINET.Internal.Core)">
            <summary>
            Creates new instance of the group with repcap name and:
            - defined group item type T
            - defined indexer T2 as Enum
            </summary>
            <param name="name">Name of repeated capability e.g. 'Channel'</param>
            <param name="owner">Interface that owns the instance of repeated capability</param>
            <param name="createClass">Delegate which creates instance of class which implements interface T</param>
            <param name="core">Core</param>
        </member>
        <member name="M:IVINET.Internal.RepCapGroup`2.Create(System.String,System.String)">
            <summary>
            Creates a new RepCap member
            </summary>
            <param name="key">Key name, e.g. 'Win1'</param>
            <param name="value">Command value e.g. '1'</param>
        </member>
        <member name="M:IVINET.Internal.RepCapGroup`2.Remove(System.String)">
            <summary>
            Removes the RepCap member with the given key name
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapGroup`2.Clear">
            <summary>
            Clears oll the members keys-commands
            </summary>
        </member>
        <member name="P:IVINET.Internal.RepCapGroup`2.Item(`1)">
            <summary>
            Select one element from the group based on the predefined repeated capability enum
            </summary>
        </member>
        <member name="P:IVINET.Internal.RepCapGroup`2.Item(System.String)">
            <summary>
            Select one element from the group based on the string repeated capability key,
            for example "CH1"
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapGroup`2.Build">
            <summary>
            Builds list of KeyValuePair{keyName, keyValue}
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapGroup`2.GetEnumerator">
            <summary>
            Standard enumerator for the RepCapGroup object
            </summary>
        </member>
        <member name="P:IVINET.Internal.RepCapGroup`2.Count">
            <summary>
            The number of repeated capability key/value pairs. 
            </summary>
        </member>
        <member name="P:IVINET.Internal.RepCapGroup`2.Name">
            <summary>
            The repeated capability physical identifier.
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapGroup`2.GetName(System.Int32)">
            <summary>
            Return the n-th identification name
            </summary>
        </member>
        <member name="T:IVINET.Internal.RepCapItem">
            <summary>
            Repeated capability item
            </summary>
        </member>
        <member name="T:IVINET.Internal.RepCapItemCollection">
            <summary>
            Collection of repeated capability items - list of separate repcap items used for collecting values and replacing them in one command.  
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapItemCollection.GetItemByName(System.String,System.Boolean)">
            <summary>
            Return RepCapItem searched by name. If not found, returns null.
            </summary>
            <param name="rcName">Name by which to search for the RepCapItem</param>
            <param name="throwException">Throw exception if not found</param>
            <returns></returns>
        </member>
        <member name="T:IVINET.Internal.RepCapManager">
            <summary>
            Manager of all the Repeated Capabilities.
            Holds and resolves Virtual Names and Physical Names
            Holds a dictionary with all the RepCaps. Key = RepCap Name, Value = RepCap
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapManager.CreateRepCaps">
            <summary>
            Overwritten by RepCapManagerEx where the driver's repcaps are initiated
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapManager.AddRepCap(System.String,System.String[],System.String[])">
            <summary>
            Adds one RepCap with the name and key/values pairs. Name is case-sensitive
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapManager.AddRepCap(System.String,System.String[],System.String[],System.Boolean)">
            <summary>
            Adds one RepCap with the name and key/values pairs.
            You can set it case-insensitive.
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapManager.SetVirtualNames(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Assign config store Virtural Names
            </summary>
        </member>
        <member name="P:IVINET.Internal.RepCapManager.Item(System.String)">
            <summary>
            Returns RepCap of the desired name
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapManager.Check(System.String,System.String)">
            <summary>
            Checks 2 levels:
            - Whether the RepCap with the name exists
            - Whether the RepCap[name] contains the key. Key can also be a Virtual Name
            Returns true, if the name and the name[key] exists.
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapManager.Check(IVINET.Internal.RepCapItem)">
            <summary>
            Checks if the repcap RepCapItem exists in the list of all repcaps.
            First, it checks if the 'RepCapItem.name' exists in the list of the names known to the RCmanager
            Then, it checks whether the 'RepCapItem.key' exists in the list of the RepCap pairs
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapManager.IsVirtualName(System.String)">
            <summary>
            Returns true, if the key is a virtual name
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapManager.ResolveVirtualName(System.String)">
            <summary>
            If the key is a Virtual Name, the method returns the resolved Physical Name
            Otherwise returns the same value as entered
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapManager.GetValue(System.String,System.String)">
            <summary>
            Returns value based on the RepCap name and key:
            Example: name = 'Trace', key='Tr1' returns '1'
            Key can also be a Virtual Name.
            The method throws SelectorNameException if the name or key is invalid
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapManager.GetValue(System.String,System.Enum)">
            <summary>
            Returns value based on the RepCap name and key:
            Example: name = 'Trace', key=Trace.Trace1 returns '1'
            Key can also be a Virtual Name.
            The method throws SelectorNameException if the name or key is invalid
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapManager.GetValue(IVINET.Internal.IRepCapValue)">
            <summary>
            Returns value based on the IRepCapValue RepCapName and RepCapKey.
            Key can also be a Virtual Name
            The method throws SelectorNameException if the name or key is invalid
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapManager.SelectCollectionItem``1(System.String,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns RepCap collection's item based on the Name criteria
            Key can also be a Virtual Name
            The method throws SelectorNameException if the name or key is invalid
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapManager.CollectRCItems(IVINET.Internal.IRepCapValue)">
            <summary>
            Collecting of all the RCitems, going back to the top parent
            The item.RepCapKey is always a physical name, therefore the collecting process does not work with Virtual Names
            </summary>
        </member>
        <member name="M:IVINET.Internal.RepCapManager.AssertNameAndKeyExist(System.String,System.String)">
            <summary>
            Throws an exception if the RC name or key do not exist.
            </summary>
        </member>
        <member name="T:IVINET.Internal.StreamLogger">
            <summary>
            This class implements the general stream logging
            </summary>
        </member>
        <member name="F:IVINET.Internal.StreamLogger._loggers">
            <summary>
            List of streams
            </summary>
        </member>
        <member name="F:IVINET.Internal.StreamLogger._stopWatch">
            <summary>
            Timer for measuring the durations
            </summary>
        </member>
        <member name="F:IVINET.Internal.StreamLogger._blocking">
            <summary>
            Logging blocker.
            </summary>
        </member>
        <member name="F:IVINET.Internal.StreamLogger._previousLoggedLine">
            <summary>
            Last line source logged
            </summary>
        </member>
        <member name="P:IVINET.Internal.StreamLogger.MaxBinEntryLength">
            <summary>
            Maximum size of the binary data before they are truncated
            </summary>
        </member>
        <member name="P:IVINET.Internal.StreamLogger.MaxAsciiEntryLength">
            <summary>
            Maximum size of the ASCII data before they are truncated
            </summary>
        </member>
        <member name="F:IVINET.Internal.StreamLogger._loggingLastLineTime">
            <summary>
            Last line source logged
            </summary>
        </member>
        <member name="P:IVINET.Internal.StreamLogger.LoggingEnabled">
            <summary>
            This sets or gets logging state
            </summary>
        </member>
        <member name="P:IVINET.Internal.StreamLogger.LoggingDebugEnabled">
            <summary>
            This sets or gets logging with source state
            </summary>
        </member>
        <member name="M:IVINET.Internal.StreamLogger.#ctor">
            <summary>
            Constructor for the Logger class
            </summary>
        </member>
        <member name="M:IVINET.Internal.StreamLogger._ComposeLogString(System.String,System.String)">
            <summary>
            Creates new log line with time stamp and the info / log message
            </summary>
            <param name="infoMessage"></param>
            <param name="logMessage"></param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.StreamLogger._ResponseStringToLogEntry(System.String)">
            <summary>
            Replaces the white-space characters with escape characters and truncates the response to a maximum of _maxAsciiDataSize (2048) bytes
            </summary>
            <param name="response">Response to correct</param>
            <returns>Corrected response</returns>
        </member>
        <member name="M:IVINET.Internal.StreamLogger.BlockNextLogEntry">
            <summary>
            Blocks the next Log/LogBinaryData entry
            </summary>
        </member>
        <member name="M:IVINET.Internal.StreamLogger.Add(System.IO.Stream)">
            <summary>
            Add new StreamWriter listener
            </summary>
        </member>
        <member name="M:IVINET.Internal.StreamLogger.Remove(System.IO.Stream)">
            <summary>
            Remove StreamWriter listener
            </summary>
        </member>
        <member name="M:IVINET.Internal.StreamLogger.TimerStart">
            <summary>
            Starts the timer what will be later used  by the Log() method for calculating the duration
            </summary>
        </member>
        <member name="M:IVINET.Internal.StreamLogger.Log(System.String,System.String,System.String)">
            <summary>
            Logging of a query or read: "sent -> received" or "-> received" with the received string adjusted
            </summary>
            <param name="infoMessage"></param>
            <param name="sent">Sent command/query</param>
            <param name="received">Response</param>
        </member>
        <member name="M:IVINET.Internal.StreamLogger.Log(System.String,System.String,System.Int32,System.String)">
            <summary>
            Logging of an array query: "sent -> Size %d: received" with the received string adjusted
            </summary>
            <param name="infoMessage"></param>
            <param name="sent">Sent command/query</param>
            <param name="size">Response size or number of array elements</param>
            <param name="received">Response</param>
        </member>
        <member name="M:IVINET.Internal.StreamLogger.LogBinaryData(System.String,System.String,System.Byte[])">
            <summary>
            Writes a binary data to all log streams in hexadecimal format
            </summary>
            <param name="infoMessage">Specifies the type of message, usually "viWrite" or "viRead"</param>
            <param name="sent">Sent command/query</param>
            <param name="binaryData">Binary data</param>
        </member>
        <member name="M:IVINET.Internal.StreamLogger.Log(System.String,System.String)">
            <summary>
            Writes a message to all log streams
            </summary>
            <param name="infoMessage">Specifies the type of message, usually "viWrite" or "viRead"</param>
            <param name="logMessage">Logging message</param>
        </member>
        <member name="T:IVINET.Internal.BinPatternMode">
            <summary>
            BinPatternMode for formatting string to bin/hex string pattern
            </summary>
        </member>
        <member name="F:IVINET.Internal.BinPatternMode.WithLen">
            <summary>
            Pattern with length: '#B010101,6' or '#HFF00ABCD,32'
            </summary>
        </member>
        <member name="F:IVINET.Internal.BinPatternMode.Binary">
            <summary>
            Binary pattern starting with '#B'
            </summary>
        </member>
        <member name="F:IVINET.Internal.BinPatternMode.Hexa">
            <summary>
            Hexa pattern starting with '#H'
            </summary>
        </member>
        <member name="F:IVINET.Internal.BinPatternMode.BinNoLen">
            <summary>
            Combination of Binary and NoLen: '#B010101'
            </summary>
        </member>
        <member name="F:IVINET.Internal.BinPatternMode.BinWithLen">
            <summary>
            Combination of Binary and WithLen: '#B010101,6'
            </summary>
        </member>
        <member name="F:IVINET.Internal.BinPatternMode.HexaNoLen">
            <summary>
            Combination of Hexa and NoLen: '#HFF00ABCD'
            </summary>
        </member>
        <member name="F:IVINET.Internal.BinPatternMode.HexaWithLen">
            <summary>
            Combination of Hexa and WithLen: '#HFF00ABCD,32'
            </summary>
        </member>
        <member name="T:IVINET.Internal.TrimStringMode">
            <summary>
            Trimming mode:
            WhiteCharsAllQuotes: Remove white chars and all quotes,
            WhiteCharsSingleQuotes: Remove white chars and single quotes
            WhiteCharsSingleQuotes: Remove white chars and double quotes
            WhiteCharsOnly: Remove white chars only - same as string.Trim() method
            </summary>
        </member>
        <member name="F:IVINET.Internal.TrimStringMode.WhiteCharsAllQuotes">
            <summary>
            Remove white chars and all quotes
            </summary>
        </member>
        <member name="F:IVINET.Internal.TrimStringMode.WhiteCharsSingleQuotes">
            <summary>
            Remove white chars and single quotes
            </summary>
        </member>
        <member name="F:IVINET.Internal.TrimStringMode.WhiteCharsDoubleQuotes">
            <summary>
            Remove white chars and double quotes
            </summary>
        </member>
        <member name="F:IVINET.Internal.TrimStringMode.WhiteCharsOnly">
            <summary>
            Remove white chars only - same as string.Trim() method
            </summary>
        </member>
        <member name="T:IVINET.Internal.StringExtensionMethods">
            <summary>
            Extension methods for string class
            </summary>
        </member>
        <member name="M:IVINET.Internal.StringExtensionMethods.TrimStringResponse(System.String,IVINET.Internal.TrimStringMode)">
            <summary>
            Trims instrument string response.
            In modes WhiteCharsAllQuotes,WhiteCharsSingleQuotes,WhiteCharsDoubleQuotes:
            All the symmetrical leading and trailing quotation marks are trimmed,
            but only if there are none in the remaining text.
            </summary>
            <param name="text">Text to trim</param>
            <param name="mode">Trimming mode</param>
            <returns>Trimmed string</returns>
        </member>
        <member name="M:IVINET.Internal.StringExtensionMethods.ParseNameValueToken(System.String,System.String@,System.String@)">
            <summary>
            Parses a string in a form "keyName = keyValue"
            </summary>
            <param name="text">Text to parse</param>
            <param name="keyName">Returned Key Name</param>
            <param name="keyValue">Returned Key Value</param>
            <returns>True, if successfully parsed</returns>
        </member>
        <member name="M:IVINET.Internal.StringExtensionMethods.EndsWithLF(System.String)">
            <summary>
            The fastest way to check whether a string ends with a LineFeed
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.StringExtensionMethods.ContainsQuestionMark(System.String)">
            <summary>
            The fastest way to check whether a string contains Question-mark
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.StringExtensionMethods.AddToken(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Adds/Replaces token to dictionary: key = value
            </summary>
        </member>
        <member name="M:IVINET.Internal.StringExtensionMethods.AppendIfNotEmpty(System.String,System.String,System.String)">
            <summary>
            Appends the splitter + contentToAppend (if not null, empty, or white spaces) to the string.
            Otherwise returns the original string.
            </summary>
        </member>
        <member name="M:IVINET.Internal.StringExtensionMethods.PrependIfNotEmpty(System.String,System.String,System.String)">
            <summary>
            Prepends the splitter + contentToPrepend (if not null, empty, or white spaces) before the string.
            Otherwise returns the original string.
            </summary>
        </member>
        <member name="M:IVINET.Internal.StringExtensionMethods.FormatToBinaryWritePattern(System.String,IVINET.Internal.BinPatternMode)">
             <summary>
            Takes the input string and formats it into the binary pattern
            Depending on the 'defaultPatterMode', you can use this function for Binary or Hexa patterns with or without length suffix:
            <para>Examples:</para>
            <para>patternMode = BinNoLen, '1234' returns '#B1234'</para>
            <para>patternMode = BinNoLen, '#H1234' returns '#H1234'</para>
            <para>patternMode = BinNoLen, '1234,4' returns '#B1234,4'</para>
            <para>patternMode = BinWithLen, '1234,77' returns '#B1234,77'</para>
            <para>patternMode = BinWithLen, '#B1234' returns '#B1234,4'</para>
            <para>patternMode = HexaWithLen, '1234' returns '#H1234,16'</para>
            <para>patternMode = 1, addLenSuffix = True, '1234,96' returns '#H1234,96'</para>
            <para>patternMode = 1, addLenSuffix = True, '1234,95' returns '#H1234,16'</para>
            <para>patternMode = 1, addLenSuffix = True, '1234,12' returns '#H1234,16'</para>
             </summary>
        </member>
        <member name="M:IVINET.Internal.StringExtensionMethods.FormatToBinaryReadPattern(System.String)">
            <summary>
            Takes the response string from the instrument and strips it for the user. Examples:
            <para>'#B001100' => '001100'</para>
            <para>'#B001100,6' => '001100'</para>
            <para>'#H0FABCDE0,32' => '0FABCDE0'</para>
            <para>'#H0FABCDE0' => '0FABCDE0'</para>
            <para>'0011100' => '0011100'</para>
            </summary>
        </member>
        <member name="T:IVINET.Internal.RsDrvFormat">
            <summary>
            Conversion methods between string - double - boolean - integer values
            </summary>
        </member>
        <member name="F:IVINET.Internal.RsDrvFormat.Number">
            <summary>
            Decimal formatting object for the driver - comma as fractional part separator
            </summary>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.#cctor">
            <summary>
            Constructor of the static class
            </summary>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToBoolean(System.String)">
            <summary>
            Converts string to boolean
            </summary>
            <param name="value"></param>
            <returns>true or false boolean value</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.PassFailToTrueFalse(System.String)">
            <summary>
            Converts string Pass/Fail to boolean True/False. Case Insensitive
            </summary>
            <param name="value">Pass/Fail string</param>
            <returns>true for "Pass" / "Passed", false for "Fail" / "Failed"</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToDouble(System.String,System.Nullable{System.Double})">
            <summary>
            Converts string to Double value. Also recognizes case insensitive "NAN", "+Inf", "-Inf"
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue
            </summary>
            <param name="text">Text to convert</param>
            <param name="defValue">Default value. None if not entered</param>
            <returns>Double value</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToInt32(System.String,System.Nullable{System.Int32})">
            <summary>
            Converts string to Int32 value.
            Also recognizes case insensitive "NAN"(=Int32.MinValue), "+Inf"(=Int32.MaxValue), "-Inf"(=Int32.MinValue)
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue
            </summary>
            <param name="text">Text to convert</param>
            <param name="defValue">Default value. None if not entered</param>
            <returns>Integer32 value</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToInt64(System.String,System.Nullable{System.Int64})">
            <summary>
            Converts string to Int64 value.
            Also recognizes case insensitive "NAN"(=Int64.MinValue), "+Inf"(=Int64.MaxValue), "-Inf"(=Int64.MinValue)
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue
            </summary>
            <param name="text">Text to convert</param>
            <param name="defValue">Default value. None if not entered</param>
            <returns>Integer64 value</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToDoubleString(System.Double)">
            <summary>
            Converts double number to string using {0:g} formatter
            </summary>
            <param name="number">double number to convert to string</param>
            <returns>converted double number to string</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToBooleanString(System.Boolean)">
            <summary>
            Converts Boolean to string using ? "ON" : "OFF"
            </summary>
            <param name="number">boolean to convert to string</param>
            <returns>converted boolean as "ON" / "OFF" string</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToDoubleArray(System.String,System.Nullable{System.Double})">
            <summary>
            Converts string with comma-separated values to array of Doubles
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue
            Also recognizes case insensitive "NAN", "+Inf", "-Inf"
            If the text is null or empty, the method returns an 0-size array
            </summary>
            <param name="text">Text to convert</param>
            <param name="defValue">Default value. None if not entered</param>
            <returns>Double value</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToInt32Array(System.String,System.Nullable{System.Int32})">
            <summary>
            Converts string with comma-separated values to array of int values.
            Also recognizes case insensitive "NAN"(=Int32.MinValue), "+Inf"(=Int32.MaxValue), "-Inf"(=Int32.MinValue)
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue
            If the text is null or empty, the method returns an 0-size array
            </summary>
            <param name="text">Text to convert</param>
            <param name="defValue">Default value. None if not entered</param>
            <returns>Double value</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToBooleanArray(System.String)">
            <summary>
            Converts string with comma-separated values to array of Booleans
            If the text is null or empty, the method returns an 0-size array
            </summary>
            <param name="text">Text to convert</param>
            <returns>Boolean value</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToFloat32Array(System.Byte[],System.Boolean)">
            <summary>
            Converts Binary data byte[] to 4 Bytes/Number array of Floats.
            The array is returned as double[] type
            </summary>
            <param name="data">Input binary data to convert</param>
            <param name="swapEndianness">If false, keeps the endianness as it is. If true, swaps the endianness</param>
            <returns>Double array of float32 numbers</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToDouble64Array(System.Byte[],System.Boolean)">
            <summary>
            Converts Binary data byte[] to 8 Bytes/Number array of Doubles.
            The array is returned as double[] type
            </summary>
            <param name="data">Input binary data to convert</param>
            <param name="swapEndianness">If false, keeps the endianness as it is. If true, swaps the endianness</param>
            <returns>Double array of double64 numbers</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToInt32Array(System.Byte[],System.Boolean)">
            <summary>
            Converts Binary data byte[] to 4 Bytes/Number array of Integers.
            The array is returned as int32[] type
            </summary>
            <param name="data">Input binary data to convert</param>
            <param name="swapEndianness">If false, keeps the endianness as it is. If true, swaps the endianness</param>
            <returns>Integer array of int32 numbers</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToInt16Array(System.Byte[],System.Boolean)">
            <summary>
            Converts Binary data byte[] to 2 Bytes/Number array of Integers.
            The array is returned as int32[] type
            </summary>
            <param name="data">Input binary data to convert</param>
            <param name="swapEndianness">If false, keeps the endianness as it is. If true, swaps the endianness</param>
            <returns>Integer array of int16 numbers</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToArrayOfFloatNumbers(System.Byte[],IVINET.Internal.InstrBinaryFloatNumbersFormat)">
            <summary>
            Decodes binary data to an array of floating-point numbers based on the entered format
            </summary>
            <param name="data">Binary data</param>
            <param name="binaryFloatNumbersFormat">Format in which the data is to be parsed</param>
            <returns>Array of decoded floating-point numbers always returned as doubles</returns>
        </member>
        <member name="M:IVINET.Internal.RsDrvFormat.ToArrayOfIntegerNumbers(System.Byte[],IVINET.Internal.InstrBinaryIntegerNumbersFormat)">
            <summary>
            Decodes binary data to an array of integer numbers based on the entered format
            </summary>
            <param name="data">Binary data</param>
            <param name="binaryIntegerNumbersFormat">Format in which the data is to be parsed</param>
            <returns>Array of decoded integer numbers always returned as int32</returns>
        </member>
        <member name="T:IVINET.Internal.ConvertObject">
            <summary>
            Static class for converting to simple data types
            </summary>
        </member>
        <member name="M:IVINET.Internal.ConvertObject.ToBoolean(System.Object)">
            <summary>
            Casting object type to boolean with better exception description
            </summary>
            <param name="obj">input value as object</param>
            <returns>boolean value</returns>
        </member>
        <member name="M:IVINET.Internal.ConvertObject.ToString(System.Object)">
            <summary>
            Casting object type to string with better exception description
            </summary>
            <param name="obj">input value as object</param>
            <returns>string value</returns>
        </member>
        <member name="M:IVINET.Internal.ConvertObject.ToInt32(System.Object)">
            <summary>
            Casting object type to integer32 with better exception description
            </summary>
            <param name="obj">input value as object</param>
            <returns>Int32 value</returns>
        </member>
        <member name="M:IVINET.Internal.ConvertObject.ToInt64(System.Object)">
            <summary>
            Casting object type to integer64 with better exception description
            </summary>
            <param name="obj">input value as object</param>
            <returns>Int64 value</returns>
        </member>
        <member name="M:IVINET.Internal.ConvertObject.ToDouble(System.Object)">
            <summary>
            Casting object type to Double with better exception description
            </summary>
            <param name="obj">input value as object</param>
            <returns>Double value</returns>
        </member>
        <member name="M:IVINET.Internal.ConvertObject.ToPrecisionTimeSpanMilliseconds(System.Int32)">
            <summary>
            Converts Milliseconds to PrecisionTimeSpan
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:IVINET.Internal.ConvertObject.ToMilliseconds(Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Converts PrecisionTimeSpan to Milliseconds
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="T:IVINET.Internal.Visa">
            <summary>
            Wrapper for C - based visa32.dll
            </summary>
        </member>
        <member name="T:IVINET.Internal.Visa.VisaEventType">
            <summary>
            Indicates the type of a VISA.NET event.
            </summary>
        </member>
        <member name="F:IVINET.Internal.Visa.ViAttrTmoValue">
            <summary>
            This is attribute names for function viSetAttribute and viGetAttribute
            </summary>
        </member>
        <member name="F:IVINET.Internal.Visa._visaC">
            <summary>
            VisaC object
            </summary>
        </member>
        <member name="F:IVINET.Internal.Visa._rmSession">
            <summary>
            Resource Manager session handle
            </summary>
        </member>
        <member name="F:IVINET.Internal.Visa._session">
            <summary>
            Instrument session handle
            </summary>
        </member>
        <member name="F:IVINET.Internal.Visa.ResourceName">
            <summary>
            Resource string
            </summary>
        </member>
        <member name="F:IVINET.Internal.Visa._buffer">
            <summary>
            buffer for reading from instrument
            </summary>
        </member>
        <member name="P:IVINET.Internal.Visa.VisaManufacturer">
            <summary>
            Visa Manufacturer String
            </summary>
        </member>
        <member name="P:IVINET.Internal.Visa.TimeoutMs">
            <summary>
            VISA timeout in milliseconds
            </summary>
        </member>
        <member name="P:IVINET.Internal.Visa.ReadTermCharacterEnabled">
            <summary>
            Enable termination character when Reading
            </summary>
        </member>
        <member name="P:IVINET.Internal.Visa.ReadTermCharacter">
            <summary>
            Define termination character when Reading
            </summary>
        </member>
        <member name="P:IVINET.Internal.Visa.SendEndEnable">
            <summary>
            Send End Enable when Writing
            </summary>
        </member>
        <member name="P:IVINET.Internal.Visa.SerialSendEndIn">
            <summary>
            Serial Port Send End In
            </summary>
        </member>
        <member name="P:IVINET.Internal.Visa.SerialSendEndOut">
            <summary>
            Serial Port Send End Out
            </summary>
        </member>
        <member name="P:IVINET.Internal.Visa.IsHislip">
            <summary>
            Checks whether the TCPIP session is HiSLIP
            </summary>
        </member>
        <member name="P:IVINET.Internal.Visa.ReadBufferSize">
            <summary>
            Size of the internal buffer used for all read operations
            </summary>
        </member>
        <member name="P:IVINET.Internal.Visa.Session">
            <summary>
            All the parameters encoded as bytes array required to use the same VISA session
            </summary>
        </member>
        <member name="P:IVINET.Internal.Visa.VisaDllName">
            <summary>
            Returns used VISA name including bittness
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.#ctor(System.String,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            Constructor for the VISA object
            </summary>
            <param name="resourceName">Standard VISA Resource name or an alias name</param>
            <param name="preferRsVisa">If RsVisa is installed, it will be preferred</param>
            <param name="directSession">If you provide a non-null number, the session is reused</param>
            <param name="simulating">If true, the Visa object is in simulation mode</param>
        </member>
        <member name="M:IVINET.Internal.Visa.ToString">
            <summary>
            String representation of the object: "Visa {manufacturer}, {ResourceClass}, '{resource name}'"
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa._LoadVisa(System.Boolean,System.Int32@)">
            <summary>
            Loads VISA and returns true, if the preferred VISA was loaded
            Also returns the opened RM session as out parameter
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa._EncodeToDirectSession">
            <summary>
            Encodes the current VISA session parameters into a byte array
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa._DecodeDirectSession(System.String,System.Byte[],System.Boolean@,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            Decodes entered byte array and returns the VISA session parameters
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.IsDirectSessionSimulate(System.String,System.Byte[])">
            <summary>
            Returns true, if the entered directSession signals simulating session
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa._DecodeDirectSession(System.Byte[])">
            <summary>
            Decodes entered byte array into VISA session parameters:
            _preferredVisaLoaded
            _rmSession
            _session
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa._GetVISAStatusDesc(System.Int32)">
            <summary>
            Converts the status code into human-readable message
            </summary>
            <param name="status">Status code from VISA functions</param>
        </member>
        <member name="M:IVINET.Internal.Visa._ThrowOnError(System.Int32,System.String)">
            <summary>
            Error handler for all the VISA IOException()
            </summary>
            <param name="status">Return value from VISA functions</param>
            <param name="context">Additional optional text</param>
        </member>
        <member name="M:IVINET.Internal.Visa._MoreDataIsAvailable(System.Int32)">
            <summary>
            Returns true, if entered status code indicates that more data might be available
            </summary>
            <param name="status"></param>
        </member>
        <member name="M:IVINET.Internal.Visa._ReadVisaManufacturer(System.Int32)">
            <summary>
            Returns VISA manufacturer of the entered Resource Manager
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.ReadToStream(System.IO.Stream,System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Read bytes to Stream
            </summary>
            <param name="stream">Stream to read to</param>
            <param name="count">Number of bytes to read</param>
            <param name="moreDataAvailable">Returns true, if more data for reading is available</param>
            <param name="assureResponseEndWithLF">If true, each VISA read must end with LF character. If not, the reading continues</param>
            <returns>Number of bytes actually read</returns>
        </member>
        <member name="M:IVINET.Internal.Visa.WriteFromStream(System.IO.Stream,System.Int32)">
            <summary>
            Writes bytes from Stream
            </summary>
            <param name="stream">Stream to write from</param>
            <param name="count">Bytes count to write</param>
            <returns>Bytes count actually written</returns>
        </member>
        <member name="M:IVINET.Internal.Visa._GetAttributeInt(System.UInt32)">
            <summary>
            Get Attribute of Int32 type
            </summary>
            <param name="attributeId"></param>
            <returns>value of the attribute</returns>
        </member>
        <member name="M:IVINET.Internal.Visa._SetAttributeInt(System.UInt32,System.Int32)">
            <summary>
            Set Attribute of Int32 type
            </summary>
            <param name="attributeId"></param>
            <param name="value"></param>
        </member>
        <member name="M:IVINET.Internal.Visa._GetAttributeString(System.UInt32)">
            <summary>
            Get Attribute of string type
            </summary>
            <param name="attributeId"></param>
            <returns>value of the attribute</returns>
        </member>
        <member name="M:IVINET.Internal.Visa.Finalize">
            <summary>
            When cought by the garbage collector, dispose automatically
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.Close">
            <summary>
            Close communication
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.Clear">
            <summary>
            Calling viClear() method
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.Write(System.String)">
            <summary>
            Write text to instrument
            </summary>
            <param name="text">text to write</param>
        </member>
        <member name="M:IVINET.Internal.Visa.Write(System.Byte[])">
            <summary>
            Write binary buffer to instrument
            </summary>
            <param name="buffer">binary buffer to write</param>
        </member>
        <member name="M:IVINET.Internal.Visa.Read(System.Int32,System.Boolean@,System.Boolean,System.Int32@)">
            <summary>
            Reads data from instrument with defined maximum length.
            The maxLength value cannot exceed the _buffer.Length
            </summary>
            <param name="maxLength">Maximum data length to read</param>
            <param name="moreDataAvailable">Returns true, if more data for reading is available</param>
            <param name="assureResponseEndWithLF">If true, each VISA read must end with LF character. If not, the reading continues</param>
            <param name="readCount">Number of bytes actually read</param>
            <returns>Data as Byte array</returns>
        </member>
        <member name="M:IVINET.Internal.Visa.ReadString(System.Int32,System.Boolean@,System.Boolean,System.Int32@)">
            <summary>
            Reads data as string from instrument with defined maximum length.
            The maxLength value cannot exceed the _buffer.Length
            </summary>
            <param name="maxLength">Maximum string length to read</param>
            <param name="moreDataAvailable">Returns true, if more data for reading is available</param>
            <param name="assureResponseEndWithLF">If true, each VISA read must end with LF character. If not, the reading continues</param>
            <param name="readCount">Number of characters actually read</param>
            <returns>Read data as string</returns>
        </member>
        <member name="M:IVINET.Internal.Visa.ReadChar">
            <summary>
            Reads single character
            </summary>
            <returns>read character</returns>
        </member>
        <member name="M:IVINET.Internal.Visa.ReadStb">
            <summary>
            Reads Status Byte using viReadSTB()
            </summary>
            <returns>STatus Byte value</returns>
        </member>
        <member name="M:IVINET.Internal.Visa.EnableSrqEvent(IVINET.Internal.Visa.EventMechanism)">
            <summary>
            Enables Service Request Event
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.DisableSrqEvent(IVINET.Internal.Visa.EventMechanism)">
            <summary>
            Disables Service Request Event
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.DiscardAllEnabledEvents(IVINET.Internal.Visa.EventMechanism)">
            <summary>
            Flushes all the existing events
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.DiscardAllSrqEvents(IVINET.Internal.Visa.EventMechanism)">
            <summary>
            Flushes all the existing SRQ events
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa._InstallSrqHandler(IVINET.Internal.VisaC.EventHandler)">
            <summary>
            Installs SRQ handler
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa._UninstallSrqHandler(IVINET.Internal.VisaC.EventHandler)">
            <summary>
            Uninstalls SRQ handler
            </summary>
        </member>
        <member name="M:IVINET.Internal.Visa.WaitOnSrqEvent(System.Int32,System.Boolean)">
            <summary>
            Waits on Service Request Event.
            If a timeout occurs, the method returns true
            </summary>
            <param name="timeoutMs">timeout for waiting on the SRQ event</param>
            <param name="disableAfterwards">If true, the DisableSrqEvent() is called afterwards</param>
            <returns>True, if timeout occured</returns>
        </member>
        <member name="T:IVINET.Internal.VisaC">
            <summary>
            VISA-C wrapper, provides delegates for all the required methods
            Resolves 32-bit and 64-bit libraries, and RohdeSchwarz VISA preference
            </summary>
        </member>
        <member name="P:IVINET.Internal.VisaC.RsVisaSelected">
            <summary>
            Returns true, if the RsVisa was successfully found and loaded
            </summary>
        </member>
        <member name="P:IVINET.Internal.VisaC.VisaDllName">
            <summary>
            Returns loaded VISA library name
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaC.#ctor">
            <summary>
            Prepares native VISA to use
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaC.RsVisaExist">
            <summary>
            Returns true, if the RsVisa is available
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaC.SelectNativeVisa">
            <summary>
            Selects VisaNative assembly either 32-bit or 64-bit
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaC.SelectRsVisa">
            <summary>
            Selects RsVisa assembly
            </summary>
        </member>
        <member name="T:IVINET.Internal.VisaC.VisaNative32">
            <summary>
            Wrapper for C - based Default VISA 32-bit
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaC.VisaNative32.VisaDllName">
            <summary>
            VISA-C handler prototype
            </summary>
        </member>
        <member name="T:IVINET.Internal.VisaC.VisaNative64">
            <summary>
            Wrapper for C - based Default VISA 64-bit
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaC.VisaNative64.VisaDllName">
            <summary>
            VISA-C handler prototype
            </summary>
        </member>
        <member name="T:IVINET.Internal.VisaC.RsVisaNative">
            <summary>
            Wrapper for C - based RohdeSchwarz Visa 32/64-bit
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaC.RsVisaNative.VisaDllName">
            <summary>
            VISA-C handler prototype
            </summary>
        </member>
        <member name="T:IVINET.Internal.VisaSession">
            <summary>
            VISA communication class expanded for advanced write/read/synchronization methods
            </summary>
        </member>
        <member name="T:IVINET.Internal.VisaSession.SessionKind">
            <summary>
            Session type constructed from the VISA interfaceType and ResourceClass parameters
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaSession.SessionKind.Unsupported">
            <summary>
            Unrecognised session
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaSession.SessionKind.Gpib">
            <summary>
            GPIB session
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaSession.SessionKind.Serial">
            <summary>
            Serial interface session
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaSession.SessionKind.Vxi11">
            <summary>
            LAN VXI-11 session
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaSession.SessionKind.Hislip">
            <summary>
            LAN HiSlip session
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaSession.SessionKind.Socket">
            <summary>
            LAN Socket session
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaSession.SessionKind.Usb">
            <summary>
            USB-TMC session
            </summary>
        </member>
        <member name="T:IVINET.Internal.VisaSession.ReadDataType">
            <summary>
            Data type detected when reading
            </summary>
        </member>
        <member name="T:IVINET.Internal.VisaSession.STatusByte">
            <summary>
            Instrument's STatus Byte flags
            </summary>
        </member>
        <member name="T:IVINET.Internal.VisaSession.EventStatusRegister">
            <summary>
            Event Status Register flags. Only the ones actually used (OPC flag) are defined here.
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaSession.VxiCapable">
            <summary>
            Signals whether the session is VXI-capable
            </summary>
        </member>
        <member name="P:IVINET.Internal.VisaSession.ViReadStbVisaTimeoutMilliseconds">
            <summary>
            If positive, the VISA timeout changes to this number before each ReadSTB
            </summary>
        </member>
        <member name="P:IVINET.Internal.VisaSession.OpcTimeoutMs">
            <summary>
            Operation Complete Timeout in Milliseconds
            </summary>
        </member>
        <member name="P:IVINET.Internal.VisaSession.WriteDelay">
            <summary>
            Delay in Milliseconds applied before each VISA Write
            In case of chunked write, the delay applies only to the first write
            </summary>
        </member>
        <member name="P:IVINET.Internal.VisaSession.ReadDelay">
            <summary>
            Delay in Milliseconds applied before each VISA Read
            In case of chunked read, the delay applies only to the first read
            </summary>
        </member>
        <member name="P:IVINET.Internal.VisaSession.FastSweep">
            <summary>
            If true, checking of the OPC bit in the Event Status Register is done by ReadSTB function
            If false, checking of the OPC bit in the Event Status Register is done by *STB? query
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaSession.SessionType">
            <summary>
            Type of the VISA session
            </summary>
        </member>
        <member name="F:IVINET.Internal.VisaSession.AssureResponseEndWithLf">
            <summary>
            If set to true (default value), each VISA read must end with LF character. If not, the reading continues
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.#ctor(System.String,IVINET.Internal.InstrumentSettings)">
            <summary>
            Constructor for the VisaSession
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.ToString">
            <summary>
            String representation of the object: "Instrument {vendor}, {Session Kind}, '{resource name}'"
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._ResolveOpcTimeout(System.Nullable{System.Int32})">
            <summary>
            Returns integer value of OpcTimeoutMs property, if the input nullable value is null, 0, or less than 0.
            Otherwise returns the input value.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._DelayBeforeWrite">
            <summary>
            Delay Writing by defined number of milliseconds
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._DelayBeforeRead">
            <summary>
            Delay Reading by defined number of milliseconds
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._SetRegistersEseSre(IVINET.Internal.WaitForOpcMode)">
            <summary>
            Sets the ESE and SRE registers based on the entered WaitForOpcMode
            Returns coerced WaitForOpcMode
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._FlushJunkData(System.Boolean)">
            <summary>
            Reads junk bytes to clear the instrument's output buffer
            If totalFlush is true, the method tries to completely flush the data. If false, after several reads throws DataTooLong exception
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._ReadDataUnknownLengthToStream(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Segmented reading of unknown-length data into a Stream.
            For Socket and Serial interfaces this method only works if the ReadTermCharacterEnabled is True
            segmentSize is the maximum size of one read segment
            binTransfer signals that the data are binary - used for generating errors on non-VXI11 interfaces
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._ReadDataKnownLengthToStream(System.IO.Stream,System.Int64,System.Int32)">
            <summary>
            Segmented reading of known-length data into a Stream. Maximum size of the data is Int32.MaxValue
            segmentSize is the maximum size of one read segment
            length is the expected length of data
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._ReadCopy(System.Int32,System.Boolean@)">
            <summary>
            Reads from instrument with maximum defined length.
            The maxLength value cannot exceed the VISA's _buffer.Length (100000 bytes)
            Returns only the relevant bytes in a copied buffer
            !!! Does not wait ReadDelay
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._ReadRawString(System.Int32,System.Boolean@)">
            <summary>
            Read string from instrument with maximum defined length.
            Does not trim the trailing LF
            The maxLength value cannot exceed the VISA's _buffer.Length (100kB)
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._ReadChar">
            <summary>
            Reads single character
            !!! Does not wait ReadDelay
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.ReadUnknownLength">
            <summary>
            Reads bytes from instrument with unlimited length.
            The read is performed in two steps to optimize memory use:
            The First read is performed with the fixed size of 1024 bytes.
            The Second read is then performed with 64kB segments, until all the data are read out.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.ReadStringUnknownLength">
            <summary>
            Reads string from instrument with unlimited length.
            The read is performed in two steps to optimize memory use:
            The First read is performed with the fixed size of 1024 bytes.
            The Second read is then performed with 64kB segments, until all the data are read out.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._QueryStb">
            <summary>
            Sends *STB? query and reads the result
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._ReadStb(System.Boolean)">
            <summary>
            Reads viReadSTB and casts it to the STatusByte type
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._StbToString(IVINET.Internal.VisaSession.STatusByte)">
            <summary>
            Returns Human-readable representation of the status byte
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._WriteAndPollStbVxi(System.String,System.Boolean,System.Int32,IVINET.Internal.VisaSession.STatusByte)">
            <summary>
            Reads Status Byte Register and ends if the ESB bit (5) is set to 1.
            This method also works with the SOCKET and SERIAL interface by sending *STB? query.
            In that case however, command cannot be a query.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._WriteAndPollStbNonVxi(System.String,System.Int32,IVINET.Internal.VisaSession.STatusByte)">
            <summary>
            Queries Status Byte Register (*STB?) and ends if the ESB bit (5) is set to 1.
            The command must not be a query. This method also works with the SOCKET and SERIAL interface.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._PollingDelay(System.DateTime)">
            <summary>
            Generates progressive polling delay
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._CheckMessageAvailableAfterOpc(IVINET.Internal.VisaSession.STatusByte,System.String,System.Int32,System.String)">
            <summary>
            Used internally after _StbPolling() to check if the message is available
            Throws an exception in case of MAV not available
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._NarrowDownIOtimeoutError(System.String)">
            <summary>
            This method when called after Ivi.Driver.IOTimeoutException can narrow down the error to more specific exception
            e.g. InstrumentStatusException()
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._NarrowDownOpcToutError(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            This method when called after Ivi.Driver.MaxTimeExceededException can narrow down the error to more specific exception
            e.g. InstrumentStatusException()
            If timeoutMs is set to -1, it is taken from the current OPC Timeout value
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._SetEseMask(IVINET.Internal.VisaSession.EventStatusRegister,System.Boolean)">
            <summary>
            Sending *ESE command with mask parameter
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._SetSreMask(IVINET.Internal.VisaSession.STatusByte,System.Boolean)">
            <summary>
            Sending *SRE command with StatusByte mask parameter
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._WriteAndWaitForSrq(System.String,System.Boolean,System.Int32)">
            <summary>
            Internal method for OPC wait with ServiceRequest
            Enter the command without the *OPC
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._WriteAndWaitForOpc(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Internal method to synchronise a command with OPC. Returns the last STB value
            If isQuery is true, the command must be a query - it must contain '?'
            timeoutMs - timeout in milliseconds. Value of -1 or null means the OPC timeout is used.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession._WriteAndQueryOpc(System.String,System.Int32)">
            <summary>
            Writes a command and queries an *OPC? afterwards.
            Can not be used for queries.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.ReadBinaryDataBlock(System.Boolean,System.Boolean@)">
            <summary>
            Read binary data block to byte array
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.ReadBinaryDataBlock(System.IO.Stream,System.Boolean)">
            <summary>
            Read binary data block and returns it in the entered Stream.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.Clear">
            <summary>
            Perform VISA.viClear conditionally based on the instrument settings
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.Write(System.Byte[])">
            <summary>
            Writes byte buffer to the instrument
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.Write(System.String)">
            <summary>
            Writes string command to the instrument.
            If the session is non-VXI11, the command is appended by LF if necessary
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.WriteWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Internal method to synchronise a command with OPC
            timeoutMs - timeout in milliseconds. Value of -1 or null means the OPC timeout is used.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.WriteWithWai(System.String)">
            <summary>
            Writes command with *WAI synchronization.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryAndClearEsr">
            <summary>
            Sends "*ESR? query to reset the clear-on-read bits of the Event Status Register
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryShort(System.String)">
            <summary>
            Method for querying short responses of maximum 64 bytes
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryStringShort(System.String)">
            <summary>
            Method for querying short responses of maximum 64 bytes
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryUnknownLength(System.String)">
            <summary>
            Combines Write + ReadUnknownLength()
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryStringUnknownLength(System.String)">
            <summary>
            Combines Write + ReadStringUnknownLength()
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Query bytes with OPC synchronization. If timeoutMs is set to -1, it is taken from the current OPCtimeout value
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryStringWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Query with OPC synchronization. If timeoutMs is set to -1, it is taken from the current OPCtimeout value
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryOpc">
            <summary>
            Sends *OPC? query and reads the result
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryOpc(System.Int32)">
            <summary>
            Sends *OPC? query and reads the result.
            After the entered timeout in milliseconds, the method throws the Ivi.Driver.IOTimeoutException.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.ClearBeforeRead">
            <summary>
            Clears IO buffers and the ESR register before reading/writing responses synchronized with *OPC;
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QuerySystemError">
            <summary>
            Returns one response to the SYSTEM:ERROR? query
            If 0,"No error is returned, the return string is null
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QuerySystemErrorAll">
            <summary>
            Returns all errors in the instrument's error queue
            Used query: "SYSTEM:ERROR?"
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.ParseBinaryDataHeader(System.Boolean,System.Int32,System.Byte[]@,IVINET.Internal.VisaSession.ReadDataType@)">
            <summary>
            Parses the binary data block and returns the expected length of the following data block
            firstReadCount - minimum is 1 byte. Reads more to internal buffer and then parse it from there, the unparsed portion is then returned in unparsedPortion
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.WriteBinaryDataBlock(System.String,System.IO.Stream)">
            <summary>
            Writes all the stream data as binary data block to the instrument
            It sends the entered command, followed by the constructed binary data header
            and the binary data from the stream.
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryBinaryDataBlock(System.String,System.Boolean,System.Boolean@)">
            <summary>
            Queries binary data block to byte array
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryBinaryDataBlock(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Queries binary data block and returns it in the entered Stream.
            Returns true, if the read data was binary block
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.QueryBinaryDataBlockWithOpc(System.String,System.Boolean,System.Boolean@,System.Nullable{System.Int32})">
            <summary>
            Query with OPC synchronization. If timeoutMs is set to -1, it is taken from the current OPC Timeout value
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.ErrorQueueIsNotEmpty">
            <summary>
            Returns true, if error queue contains at least one error
            </summary>
        </member>
        <member name="M:IVINET.Internal.VisaSession.ResetRegistersEseSre">
            <summary>
            Resets the status of ESE and SRE registers to default values
            </summary>
        </member>
        <member name="T:IVINET.Internal.InstrAttributes">
            <summary>
            <para>List of all the attribute IDs used in the driver.</para>
            </summary>
        </member>
        <member name="T:IVINET.Internal.RepCapManagerEx">
            <summary>
            <para>Initialises the driver&apos;s repeated capabilities to <see
            cref="F:IVINET.Internal.RepCapManager._repeatedCapabilities"/>.</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.MeasurementType">
            <summary>
            <para>Enumerates valid entries in the <see cref="F:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_rngMeasurementType"/> range table.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.MeasurementType.Voltage">
            <summary>
            <para>Voltage is measured</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.MeasurementType.Current">
            <summary>
            <para>Current is measured</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.MeasurementType.Power">
            <summary>
            <para>Power is measured</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.MeasurementType.Energy">
            <summary>
            <para>Energy is measured</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.TriggerSlope">
            <summary>
            <para>Enumerates valid entries in the <see cref="F:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_rngTriggerSlope"/> range table.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.TriggerSlope.Negative">
            <summary>
            <para>falling edge</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.TriggerSlope.Positive">
            <summary>
            <para>rising edge</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.OvpMode">
            <summary>
            <para>Enumerates valid entries in the <see cref="F:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_rngOvpMode"/> range table.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.OvpMode.Measured">
            <summary>
            <para>The return value of the instrument stands as a switching threshold for the OVP</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.OvpMode.Protected">
            <summary>
            <para>The adjusted value of the instrument stands as a switching threshold for the OVP</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.AnalogInput">
            <summary>
            <para>Enumerates valid entries in the <see cref="F:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_rngAnalogInput"/> range table.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.AnalogInput.Voltage">
            <summary>
            <para>Selects the voltage input ( 0V to 10V)</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.AnalogInput.Current">
            <summary>
            <para>Selects the current input ( 4mA to 20mA)</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.AnalogInputMode">
            <summary>
            <para>Enumerates valid entries in the <see cref="F:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_rngAnalogInputMode"/> range table.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.AnalogInputMode.Linear">
            <summary>
            <para>Output voltage linear to the input voltage</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.AnalogInputMode.Step">
            <summary>
            <para>Reference value or zero depending on threshold</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.LoggingFormat">
            <summary>
            <para>Enumerates valid entries in the <see cref="F:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_rngLoggingFormat"/> range table.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.LoggingFormat.CSV">
            <summary>
            <para>Selects the CSV format for logging</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.LoggingFormat.TXT">
            <summary>
            <para>Selects the TXT format for logging</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.LoggingMode">
            <summary>
            <para>Enumerates valid entries in the <see cref="F:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_rngLoggingMode"/> range table.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.LoggingMode.Unlimited">
            <summary>
            <para>Selects unlimited logging mode</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.LoggingMode.Count">
            <summary>
            <para>Selects count logging mode</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.LoggingMode.Time">
            <summary>
            <para>Selects time logging mode</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.Device">
            <summary>
            <para>Enumerates valid entries in the <see cref="F:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_rngDevice"/> range table.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.Device.Internal">
            <summary>
            <para>Internal Memory</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.Device.External">
            <summary>
            <para>USB Stick</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.Device.Def">
            <summary>
            <para>Internal Memory</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RegisterGroup">
            <summary>
            <para>Enumerates valid entries in the <see cref="F:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_rngRegisterGroup"/> range table.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.RegisterGroup.Operation">
            <summary>
            <para>Operation register</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.RegisterGroup.Questionable">
            <summary>
            <para>Questionable register</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.RegisterGroup.QuestionableInstrument">
            <summary>
            <para>Questionable instrument register</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.RegisterGroup.QuestionableInstrumentIsummary">
            <summary>
            <para>Questionable instrument isummary register</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RegisterType">
            <summary>
            <para>Enumerates valid entries in the <see cref="F:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_rngRegisterType"/> range table.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.RegisterType.Condition">
            <summary>
            <para>condition register</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.RegisterType.Event">
            <summary>
            <para>event register</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.RegisterType.Enable">
            <summary>
            <para>enable register</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.ImageFormat">
            <summary>
            <para>Enumerates valid entries in the <see cref="F:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_rngImageFormat"/> range table.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.ImageFormat.BMP">
            <summary>
            <para>Selects BMP image format</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.ImageFormat.PNG">
            <summary>
            <para>Selects PNG image format</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.TriggerMode">
            <summary>
            <para>Enumerates valid entries in the <see cref="F:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_rngTriggerMode"/> range table.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.TriggerMode.Single">
            <summary>
            <para>trigger event starts only one arbitrary sequence</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.TriggerMode.Run">
            <summary>
            <para>trigger event starts the whole arbitrary sequence (with all repititions)</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.ChannelFusion">
            <summary>
            <para>Enumerates valid entries in the <see cref="F:RohdeSchwarz.RsHmc804x.CoreEx.RsHmc804x_rngChannelFusion"/> range table.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.ChannelFusion.Off">
            <summary>
            <para>Output fusion state is off.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.ChannelFusion.Series">
            <summary>
            <para>Output fusion state is set to series.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.ChannelFusion.Parallel">
            <summary>
            <para>Output fusion state is set to parallel.</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.OutputMode">
            <summary>
            <para>Enumerates valid entries in the <see cref="F:RohdeSchwarz.RsHmc804x.CoreEx.RsHmc804x_rngOutputMode"/> range table.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.OutputMode.Auto">
            <summary>
            <para>The output operating mode is set automatically.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.OutputMode.Sink">
            <summary>
            <para>The output operating mode is set to sink.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.OutputMode.Source">
            <summary>
            <para>The output operating mode is set to source.</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.QueriedOutputMode">
            <summary>
            <para>Enumerates valid entries in the <see cref="F:RohdeSchwarz.RsHmc804x.CoreEx.RsHmc804x_rngQueriedOutputMode"/> range table.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.QueriedOutputMode.Auto">
            <summary>
            <para>Output is determined automatically.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.QueriedOutputMode.Sink">
            <summary>
            <para>Output mode changed to sink.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.QueriedOutputMode.Sour">
            <summary>
            <para>Output mode changed to source.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.QueriedOutputMode.Off">
            <summary>
            <para>Output is turned off.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.QueriedOutputMode.CV">
            <summary>
            <para>Output mode changed to constant voltage mode.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.QueriedOutputMode.CC">
            <summary>
            <para>Output mode changed to constant current mode.</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RepCapChannel">
            <summary>
            <para>Enumerates valid items in the Channel repeated capability.</para>
            <para>Channel: CH1, CH2, CH3, CH4</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.RepCapChannel.CH1">
            <summary>
            <para>Repeated capability CH1,Channel</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.RepCapChannel.CH2">
            <summary>
            <para>Repeated capability CH2,Channel</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.RepCapChannel.CH3">
            <summary>
            <para>Repeated capability CH3,Channel</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.RepCapChannel.CH4">
            <summary>
            <para>Repeated capability CH4,Channel</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804x.IviDCPwrOutput._AssureChannelSelected">
            <summary>
            Makes sure the channel is selected
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804x.Display">
            <summary>
            <para>This class contains the attribute that configure display.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804x.Outputs">
            <summary>
            <para>This class contains the attribute that configure output.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804x.Trigger">
            <summary>
            <para>This class contains the attribute that configure trigger.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804x.GeneralInstrumentSettings">
            <summary>
            <para>This subsystem contains methods for General Instrument Settings.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804x.System">
            <summary>
            <para>This subsystem contains methods for System interface.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804x.UtilityFunctions">
            <summary>
            <para>This subsystem contains methods for Utility Functions.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804x.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804x.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804x.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804x.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804x.DriverOperation">
            <summary>
            IIviDriverOperation contains methods and properties that manage the operation of the driver.
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804x.Identity">
            <summary>
            IIviDriverIdentity contains properties that return general information related to the identity of
            the driver and of the instrument.
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804x.Utility">
            <summary>
            IIviDriverUtility contains methods that provide a basic set of utility operations.
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xDisplay">
            <summary>
            <para>This class contains the attribute that configure display.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xDisplay.Clear">
            <summary>
            <para>Clears the text message box on the front display.</para>
            <para>SCPI command:</para>
            <para>DISPlay:TEXT:CLEar</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xDisplay.ShowMessageBox(System.String)">
            <summary>
            <para>Displays a text message box on the front display.</para>
            <para>SCPI command(s):</para>
            <para>DISPlay:TEXT[:DATA]</para>
            </summary>
            <param name="text">String with message text.</param>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs">
            <summary>
            <para>This class contains the attribute that configure output.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.Arbitrary">
            <summary>
            <para>This class contains the attribute that configure arbitrary
            function.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.Fuse">
            <summary>
            <para>This class contains the attribute that configure electronic fuse.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.Ovp">
            <summary>
            <para>This class contains the attribute that configure the ovp (over voltage
            protection).</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.Opp">
            <summary>
            <para>This class contains the attribute that configure the opp (over power
            protection).</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.Ramp">
            <summary>
            <para>This class contains the attribute that configure easy ramp.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.AnalogInput">
            <summary>
            <para>This class contains the attribute that configure analog input.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.Measurement">
            <summary>
            <para>This class contains the attribute that configure meas function.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.Sequence">
            <summary>
            <para>This class contains the attribute that configure power sequencing
            function.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.SelectedChannel">
            <summary>
            <para>This property select the channel (instrument) for which all the
            following propertys will be executed.</para>
            <para>SCPI command:</para>
            <para>INSTrument:NSELect</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.CurrentLimit">
            <summary>
            <para>Defines the current value of the selected channel.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]CURRent[:LEVel][:IMMediate][:AMPLitude]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.CurrentStepSize">
            <summary>
            <para>Defines the incremental step size for the CURRent {UP|DOWN}
            property.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]CURRent[:LEVel][:IMMediate]:STEP[:INCRement]</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.ResetCurrentStepSize">
            <summary>
            <para>Resets the incremental step size for the CURRent.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]CURRent[:LEVel][:IMMediate]:STEP[:INCRement] DEFault</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.Enabled">
            <summary>
            <para>Turns ON/OFF the previous selected channel. When switching ON, Master
            switch is also switched ON. When switching OFF, Master switch is not changed.
            If changing the Master switch status is not desired, use the <see
            cref="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.ChannelOnlyEnabled"/>.</para>
            <para>SCPI command:</para>
            <para>OUTPut[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.MasterEnabled">
            <summary>
            <para>Switchs ON/OFF all previous selected channels simultaneously.</para>
            <para>SCPI command:</para>
            <para>OUTPut:MASTer[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.ChannelOnlyEnabled">
            <summary>
            <para>Turns the output ON or OFF. Compared to <see cref="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.Enabled"/>, it
            doesn&apos;t change the Master switch settings.</para>
            <para>SCPI command:</para>
            <para>OUTPut:CHANnel[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.VoltageLevel">
            <summary>
            <para>Defines the voltage value of the selected channel.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage[:LEVel][:IMMediate][:AMPLitude]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.VoltageStepSize">
            <summary>
            <para>Defines the incremental step size for the VOLTage {UP|DOWN}
            property.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage[:LEVel][:IMMediate]:STEP[:INCRement]</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.ResetVoltageStepSize">
            <summary>
            <para>Resets the incremental step size for the VOLTage.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage[:LEVel][:IMMediate]:STEP[:INCRement] DEFault</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.ChannelFusion">
            <summary>
            <para>Sets or queries the output fusion state for 2-channel model.</para>
            <para>SCPI command:</para>
            <para>OUTPut:FUSion</para>
            <para>Instrument(s): NGA102|NGA142</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.Mode">
            <summary>
            <para>Sets the output operating mode of the specified channel.</para>
            <para>SCPI command:</para>
            <para>OUTPut:MODE</para>
            <para>Instrument(s): NGF201</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.QueryMode">
            <summary>
            <para>Queries the output operating mode of the previous selected
            channel.</para>
            <para>SCPI command:</para>
            <para>OUTPut:MODE?</para>
            <para>Instrument(s): NGA101|NGA141|NGA102|NGA142|NGF201</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.VoltmeterEnabled">
            <summary>
            <para>Configures the DVM mode state for the previous selected channel</para>
            <para>SCPI command:</para>
            <para>[SOURce]:VOLTage:DVM[:STATe]</para>
            <para>Instrument(s): NGF201</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.QueryVoltmeterValue">
            <summary>
            <para>Returns the measured voltmeter value of the previous selected
            channel</para>
            <para>SCPI command:</para>
            <para>MEASure[:VOLTage]:DVM?</para>
            <para>Instrument(s): NGF201</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.Configure(System.Int32,System.Double,System.Double)">
            <summary>
            <para>Combined setting of voltage and current for each channel.</para>
            <para>SCPI command(s):</para>
            <para>APPLy
            {&lt;voltage&gt;|DEF|MIN|MAX}[,{&lt;current&gt;|DEF|MIN|MAX}][,{OUT1|OUT2|OUT3}]</para>
            </summary>
            <param name="output">Numerical selection of a channel</param>
            <param name="voltage">Defines the voltage value of the selected
            channel</param>
            <param name="current">Defines the current value of the selected
            channel</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.Measure(RohdeSchwarz.RsHmc804x.MeasurementType)">
            <summary>
            <para>Takes a measurement on the output signal and returns the measured
            value.</para>
            <para>SCPI command(s):</para>
            <para>MEASure[:SCALar][:VOLTage][:DC]?</para>
            <para>MEASure[:SCALar]:CURRent[:DC]?</para>
            <para>MEASure[:SCALar]:POWer?</para>
            <para>MEASure[:SCALar]:ENERgy?</para>
            </summary>
            <param name="measurementType">The type of measurement to take.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.QueryCurrentLimitMax(System.Double)">
            <summary>
            <para>This method returns the maximum programmable current limit that the
            power supply accepts for a particular voltage level on an output.</para>
            <para>SCPI command(s):</para>
            <para>[SOURce:]VOLTage[:LEVel][:IMMediate][:AMPLitude]</para>
            <para>[SOURce:]CURRent[:LEVel][:IMMediate][:AMPLitude]? MAX</para>
            </summary>
            <param name="voltageLevel">The voltage level for which to determine the
            maximum programmable current limit.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputs.QueryVoltageLevelMax(System.Double)">
            <summary>
            <para>This method returns the maximum programmable voltage level that the
            power supply accepts for a particular current limit on an output.</para>
            <para>SCPI command(s):</para>
            <para>[SOURce:]CURRent[:LEVel][:IMMediate][:AMPLitude]</para>
            <para>[SOURce:]VOLTage[:LEVel][:IMMediate][:AMPLitude]? MAX</para>
            </summary>
            <param name="currentLimit">The current limit for which to determine the
            maximum programmable voltage level.</param>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsArbitrary">
            <summary>
            <para>This class contains the attribute that configure arbitrary function.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsArbitrary.Enabled">
            <summary>
            <para>Enables (On/1) / Disables (Off/0) the arbitrary function of the selected
            channel.</para>
            <para>SCPI command:</para>
            <para>ARBitrary[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsArbitrary.Repetitions">
            <summary>
            <para>Sets the arbitrary waveform repetitions.</para>
            <para>SCPI command:</para>
            <para>ARBitrary:REPetitions</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsArbitrary.Endpoint">
            <summary>
            <para>Sets the endpoint of the arbitrary waveform.</para>
            <para>SCPI command:</para>
            <para>ARBitrary:ENDPoint</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsArbitrary.Reset">
            <summary>
            <para>Deletes the arbitrary waveform values.</para>
            <para>SCPI command:</para>
            <para>ARBitrary:CLEar</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsArbitrary.SaveFile">
            <summary>
            <para>Saves the arbitrary waveform in the selected file.</para>
            <para>SCPI command:</para>
            <para>ARBitrary:SAVE</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsArbitrary.LoadFile">
            <summary>
            <para>Loads the arbitrary waveform from the selected file.</para>
            <para>SCPI command:</para>
            <para>ARBitrary:LOAD</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsArbitrary.Triggered">
            <summary>
            <para>Enables (On/1) / Disables (Off/0) the trigger input on the rear
            connector for arbitrary functionality.</para>
            <para>SCPI command:</para>
            <para>ARBitrary:TRIGgered[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsArbitrary.TriggerMode">
            <summary>
            <para>Selects the trigger mode.</para>
            <para>SCPI command:</para>
            <para>ARBitrary:TRIGgered:MODE</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsArbitrary.ConfigureFile(System.String,RohdeSchwarz.RsHmc804x.Device)">
            <summary>
            <para>Set the filename and device for arbitrary.</para>
            </summary>
            <param name="filename">Selects the filename.</param>
            <param name="device">Selects the device.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsArbitrary.WriteData(System.Double[],System.Double[],System.Double[],System.Int32[])">
            <summary>
            <para>Sets the arbitrary waveform values for the selected channel.</para>
            </summary>
            <param name="voltage"></param>
            <param name="current"></param>
            <param name="time"></param>
            <param name="interpolationMode"></param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsArbitrary.ReadData(System.Double[]@,System.Double[]@,System.Double[]@,System.Int32[]@)">
            <summary>
            <para>Queries the arbitrary waveform values of the selected channel.</para>
            </summary>
            <param name="voltage"></param>
            <param name="current"></param>
            <param name="time"></param>
            <param name="interpolationMode"></param>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsFuse">
            <summary>
            <para>This class contains the attribute that configure electronic fuse.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsFuse.Enabled">
            <summary>
            <para>Enables (On/1) / Disables (Off/0) the fuse for the selected
            channel.</para>
            <para>SCPI command:</para>
            <para>FUSE[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsFuse.Delay">
            <summary>
            <para>Sets the fuse delay.</para>
            <para>SCPI command:</para>
            <para>FUSE:DELay</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsFuse.Link">
            <summary>
            <para>Combines the channel fuses (Fuse Linking).</para>
            <para>SCPI command:</para>
            <para>FUSE:LINK</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsFuse.Unlink">
            <summary>
            <para>Unlinking the combined channel fuses</para>
            <para>SCPI command:</para>
            <para>FUSE:UNLink</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsFuse.Tripped">
            <summary>
            <para>Query, if the fuse has tripped.</para>
            <para>SCPI command:</para>
            <para>FUSE:TRIPed?</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsFuse.IsLinked(System.Int32)">
            <summary>
            <para>Queries the combined channel fuses. It returns the link status between
            the currently selected channel and the parameter.</para>
            </summary>
            <param name="channel">Specifies fuse linked channel.</param>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsOvp">
            <summary>
            <para>This class contains the attribute that configure the ovp (over voltage
            protection).</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsOvp.ResetOutputProtection">
            <summary>
            <para>Resets the state of the OVP function.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:PROTection:CLEar</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsOvp.Enabled">
            <summary>
            <para>Enables (ON/1) / Disables (OFF/0) the OVP (over voltage protection)
            function.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:PROTection[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsOvp.Limit">
            <summary>
            <para>Sets the voltage level of the OVP function when the OVP will be
            tripped.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:PROTection:LEVel</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsOvp.Tripped">
            <summary>
            <para>Query if OVP is tripped (1) or is not tripped (0).</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:PROTection:TRIPped?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsOvp.Mode">
            <summary>
            <para>Sets the OVP function mode.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:PROTection:MODE</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsOpp">
            <summary>
            <para>This class contains the attribute that configure the opp (over power
            protection).</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsOpp.ResetPowerProtection">
            <summary>
            <para>Resets the state of the OPP function</para>
            <para>SCPI command:</para>
            <para>[SOURce:]POWer:PROTection:CLEar</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsOpp.Enabled">
            <summary>
            <para>Enables (ON/1) / Disables (OFF/0) the OPP (over power protection)
            function.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]POWer:PROTection[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsOpp.Limit">
            <summary>
            <para>Sets the power level of the OPP function when the OPP will be
            tripped.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]POWer:PROTection:LEVel</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsOpp.Tripped">
            <summary>
            <para>Query if OPP is tripped (1) or is not tripped (0).</para>
            <para>SCPI command:</para>
            <para>[SOURce:]POWer:PROTection:TRIPped?</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsRamp">
            <summary>
            <para>This class contains the attribute that configure easy ramp.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsRamp.Enabled">
            <summary>
            <para>Enables (ON/1) / Disables (OFF/0) the EasyRamp function.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:RAMP[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsRamp.Duration">
            <summary>
            <para>Sets the duration of the voltage ramp.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:RAMP:DURation</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsFuseAnalogInput">
            <summary>
            <para>This class contains the attribute that configure analog input.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsFuseAnalogInput.Enabled">
            <summary>
            <para>Enables (ON/1) / Disables (OFF/0) the analog input on the rear
            connector.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:AINPut[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsFuseAnalogInput.Input">
            <summary>
            <para>Selects the input unit of the analog input connector.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:AINPut:INPut</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsFuseAnalogInput.Mode">
            <summary>
            <para>Selects the mode of the analog input connector.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:AINPut:MODE</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsFuseAnalogInput.Threshold">
            <summary>
            <para>Sets the threshold for the STEP input mode.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:AINPut:THReshold</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurement">
            <summary>
            <para>This class contains the attribute that configure meas function.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurement.Logging">
            <summary>
            <para>This class contains the attribute that configure system logging.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurement.Energy">
            <summary>
            <para>This class contains the attribute that configure energy counter.</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurementLogging">
            <summary>
            <para>This class contains the attribute that configure system logging.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurementLogging.File">
            <summary>
            <para>This class contains the attribute that configure system logging
            file.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurementLogging.Enabled">
            <summary>
            <para>Enables / Disables global data logging function.</para>
            <para>SCPI command:</para>
            <para>LOG[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurementLogging.ChannelLoggingEnabled">
            <summary>
            <para>Enables / Disables data logging function for the selected
            channel.</para>
            <para>SCPI command:</para>
            <para>LOG:CHANnel[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurementLogging.Format">
            <summary>
            <para>Selects the format for logging.</para>
            <para>SCPI command:</para>
            <para>LOG:FORMat</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurementLogging.Mode">
            <summary>
            <para>Selects the mode of the logging function.</para>
            <para>SCPI command:</para>
            <para>LOG:MODE</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurementLogging.Time">
            <summary>
            <para>Sets the time in &apos;TIME&apos; mode.</para>
            <para>SCPI command:</para>
            <para>LOG:TIME</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurementLogging.Count">
            <summary>
            <para>Sets the number of samples in &apos;COUNt&apos; mode.</para>
            <para>SCPI command:</para>
            <para>LOG:COUNt</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurementLogging.Interval">
            <summary>
            <para>Sets the interval between two measurements in seconds.</para>
            <para>SCPI command:</para>
            <para>LOG:INTerval</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurementLogging.Triggered">
            <summary>
            <para>Sets the mode of the trigger.</para>
            <para>SCPI command:</para>
            <para>LOG:TRIGgered</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurementLoggingFile">
            <summary>
            <para>This class contains the attribute that configure system logging file.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurementLoggingFile.ConfigureFile(System.String,RohdeSchwarz.RsHmc804x.Device)">
            <summary>
            <para>Set the filename and device for logging.</para>
            <para>SCPI command(s):</para>
            <para>LOG:FNAMe {&lt;File_Name&gt;},[{INT | EXT | DEF}]</para>
            </summary>
            <param name="filename">Selects the filename.</param>
            <param name="device">Selects the device.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurementLoggingFile.ReadFileFromInstrument(System.String,RohdeSchwarz.RsHmc804x.Device,System.String)">
            <summary>
            <para>Read the file &apos;Filename&apos; (INT -&gt; Internal Memory, EXT -&gt;
            USB Stick, DEF -&gt; Internal Memory).</para>
            <para>SCPI command(s):</para>
            <para>DATA:DATA? {&lt;&apos;Filename&apos;&gt;} [ {INT | EXT | DEF } ]</para>
            </summary>
            <param name="filename">Selects the filename.</param>
            <param name="device">Selects the device.</param>
            <param name="destination">Defines destination file to which the data transfer
            from instrument to control computer applies.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurementLoggingFile.Delete(System.String,RohdeSchwarz.RsHmc804x.Device)">
            <summary>
            <para>Delete the file &apos;Filename&apos; (INT -&gt; Internal Memory, EXT
            -&gt; USB Stick, DEF -&gt; Internal Memory).</para>
            <para>SCPI command(s):</para>
            <para>DATA:DELete {&lt;&apos;Filename&apos;&gt;} [ {INT | EXT | DEF } ]</para>
            </summary>
            <param name="filename">Selects the filename.</param>
            <param name="device">Selects the device.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurementLoggingFile.ReadDataPoints(System.String,RohdeSchwarz.RsHmc804x.Device)">
            <summary>
            <para>Read the number of measurements from &apos;Filename&apos; (INT -&gt;
            Internal Memory, EXT -&gt; USB Stick, DEF -&gt; Internal Memory).</para>
            <para>SCPI command(s):</para>
            <para>DATA:POINts? {&lt;&apos;Filename&apos;&gt;} [ {INT | EXT | DEF }
            ]</para>
            </summary>
            <param name="filename">Selects the filename.</param>
            <param name="device">Selects the device.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurementLoggingFile.ReadDataCatalog(RohdeSchwarz.RsHmc804x.Device)">
            <summary>
            <para>List all available files of the selected memory (INT -&gt; Internal
            Memory, EXT -&gt; USB Stick, DEF -&gt; Internal Memory).</para>
            <para>SCPI command(s):</para>
            <para>DATA:LIST? [ {INT | EXT | DEF } ]</para>
            </summary>
            <param name="device">Selects the device.</param>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurementEnergy">
            <summary>
            <para>This class contains the attribute that configure energy counter.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurementEnergy.Enabled">
            <summary>
            <para>Enables (ON/1) / disables (OFF/0) the power counter function.</para>
            <para>SCPI command:</para>
            <para>MEASure[:SCALar]:ENERgy:STATe</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsMeasurementEnergy.Reset">
            <summary>
            <para>Resets the amount of the energie counter function.</para>
            <para>SCPI command:</para>
            <para>MEASure[:SCALar]:ENERgy:RESet</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsSequence">
            <summary>
            <para>This class contains the attribute that configure power sequencing
            function.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsSequence.Enabled">
            <summary>
            <para>Enables (On/1) / Disables (Off/0) the power sequencing function.</para>
            <para>SCPI command:</para>
            <para>SEQuence[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsSequence.DelayEnabled">
            <summary>
            <para>Enables (On/1) / Disables (Off/0) the delay of the selected
            channel.</para>
            <para>SCPI command:</para>
            <para>SEQuence:CHANnel[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsSequence.Delay">
            <summary>
            <para>Set the delay in sequencing module for the selected channel.</para>
            <para>SCPI command:</para>
            <para>SEQuence:DELay</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xOutputsSequence.Triggered">
            <summary>
            <para>Enables (On/1) / Disables (Off/0) the trigger function.</para>
            <para>SCPI command:</para>
            <para>SEQuence:TRIGgered</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xTrigger">
            <summary>
            <para>This class contains the attribute that configure trigger.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xTrigger.Slope">
            <summary>
            <para>Specifies the type of EXTERNAL trigger input -&gt; POSitive (rising
            edge), NEGative (falling Edge)</para>
            <para>SCPI command:</para>
            <para>TRIGger:SLOPe</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xGeneralInstrumentSettings">
            <summary>
            <para>This subsystem contains methods for General Instrument Settings.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xGeneralInstrumentSettings.HardCopy">
            <summary>
            <para>This subsystem contains methods for General Instrument Settings of Hard
            Copy.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xGeneralInstrumentSettings.System">
            <summary>
            <para>This subsystem contains methods for General Instrument Settings of
            System Subsystem.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xGeneralInstrumentSettings.Status">
            <summary>
            <para>This subsystem contains methods for General Instrument Settings of
            Status Subsystem.</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xHardCopy">
            <summary>
            <para>This subsystem contains methods for General Instrument Settings of Hard
            Copy.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xHardCopy.ImageFormat">
            <summary>
            <para>The parameter selects the data format of the screenshot.</para>
            <para>SCPI command:</para>
            <para>HCOPy:FORMat</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xHardCopy.ImageWidth">
            <summary>
            <para>Returns the width of the screenshot.</para>
            <para>SCPI command:</para>
            <para>HCOPy:SIZE:X?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xHardCopy.ImageHeight">
            <summary>
            <para>Returns the height of the screenshot.</para>
            <para>SCPI command:</para>
            <para>HCOPy:SIZE:Y?</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xHardCopy.ImageSnapshot(System.String)">
            <summary>
            <para>The DATA? query responses screenshot data in binary format</para>
            </summary>
            <param name="destination">Defines destination file to which the data transfer
            from instrument to control computer applies.</param>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xSystem">
            <summary>
            <para>This subsystem contains methods for General Instrument Settings of System
            Subsystem.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xSystem.BeeperEnabled">
            <summary>
            <para>Disables or enables the beeper tone.</para>
            <para>SCPI command:</para>
            <para>SYSTem:BEEPer:STATe</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xSystem.StartBeep">
            <summary>
            <para>When sending a property, the device emits a beep.</para>
            <para>SCPI command:</para>
            <para>SYSTem:BEEPer[:IMMediate]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xSystem.SystemError">
            <summary>
            <para>Query of the error list; After reading of an error it will be erased
            from the register. The next query will read the next error provided there was
            more than one.</para>
            <para>SCPI command:</para>
            <para>SYSTem:ERRor[:NEXT]?</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xSystem.SystemLocal">
            <summary>
            <para>Local operating mode (front panel control).</para>
            <para>SCPI command:</para>
            <para>SYSTem:LOCal</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xSystem.SystemRemote">
            <summary>
            <para>Remote control (front panel control locked).</para>
            <para>SCPI command:</para>
            <para>SYSTem:REMote</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xSystem.SystemRWLock">
            <summary>
            <para>The front panel control is locked; with the SystemLocal method the front
            panel control will be activated.</para>
            <para>SCPI command:</para>
            <para>SYSTem:RWLock</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xSystem.SystemVersion">
            <summary>
            <para>Query of the firmware version.</para>
            <para>SCPI command:</para>
            <para>SYSTem:VERSion?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xSystem.Options">
            <summary>
            <para>Returns the list of options installed on the instrument.</para>
            <para>SCPI command:</para>
            <para>SYSTem:OPTion?</para>
            <para>Instrument(s): NGA101|NGA141|NGA102|NGA142</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xSystem.DeviceFootPrint">
            <summary>
            <para>Returns device foot print info</para>
            <para>SCPI command:</para>
            <para>SYSTem:DFPRint?</para>
            <para>Instrument(s): NGA101|NGA141|NGA102|NGA142</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xStatus">
            <summary>
            <para>This subsystem contains methods for General Instrument Settings of Status
            Subsystem.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xStatus.StatusPreset">
            <summary>
            <para>Clears all bits in the Questionable Data enable register and the
            Standard Operation enable register.</para>
            <para>SCPI command:</para>
            <para>STATus:PRESet</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xStatus.SetRegister(RohdeSchwarz.RsHmc804x.RegisterGroup,System.Int32,RohdeSchwarz.RsHmc804x.RegisterType,System.Int32)">
            <summary>
            <para>Sets the value of selected status register.</para>
            </summary>
            <param name="registerGroup">Selects the status register group.</param>
            <param name="isummary">Selects the specific output.</param>
            <param name="registerType">Selects the type of status register.</param>
            <param name="value">Sets the value to be set to selected register.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xStatus.GetRegister(RohdeSchwarz.RsHmc804x.RegisterGroup,System.Int32,RohdeSchwarz.RsHmc804x.RegisterType)">
            <summary>
            <para>Queries the value of selected status register.</para>
            </summary>
            <param name="registerGroup">Selects the status register group.</param>
            <param name="isummary">Selects the specific output.</param>
            <param name="registerType">Selects the type of status register.</param>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xSystemIO">
            <summary>
            <para>This subsystem contains methods for System interface.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xSystemIO.IOTimeout">
            <summary>
            <para>Thise parameter specifies the visa timeout in milliseconds.</para>
            <para>SCPI command:</para>
            <para>cmd</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xSystemIO.ReadBytes">
            <summary>
            <para>Reads a complete response from the instrument.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xSystemIO.ReadString">
            <summary>
            <para>Reads a complete response from the instrument and returns it as a
            string.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xSystemIO.WriteBytes(System.Byte[])">
            <summary>
            <para>Write an array of bytes to the device.</para>
            </summary>
            <param name="buffer">The array of bytes to be written to the device.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xSystemIO.WriteString(System.String)">
            <summary>
            <para>Write a string to the device.</para>
            </summary>
            <param name="data">The string to be written to the device</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xSystemIO.WriteCommandWithOPCSync(System.String,System.Nullable{System.Int32})">
            <summary>
            <para>Sends a command to the instrument synchronised with OPC-polling. Use
            this method to wait for an instrument operation that can take a long time to
            complete, e.g. self-alignment. If timeout is null, -1 or 0, the current Opc
            Timeout is used.</para>
            </summary>
            <param name="command">Pass the string to be written to the instrument.</param>
            <param name="timeout">Timeout value. If timeout is null, -1 or 0, the current
            Opc Timeout is used.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xSystemIO.QueryWithOPCSync(System.String,System.Nullable{System.Int32})">
            <summary>
            <para>Sends a query to the instrument synchronised with OPC-polling. Use this
            method to wait for a response that can take a long time to complete e.g.
            self-alignment, calibration or self-test. If timeout is null, -1 or 0, the
            current Opc Timeout is used.</para>
            </summary>
            <param name="command">Pass the string to be written to the instrument.</param>
            <param name="timeout">Timeout value. If timeout is null, -1 or 0, the current
            Opc Timeout is used.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xSystemIO.WriteBinaryBlockFromStream(System.String,System.IO.Stream)">
            <summary>
            <para>Writes IEEE binary data block from stream to instrument. You need to
            specify the SCPI command to prepend the binary data block.</para>
            </summary>
            <param name="command">Command.</param>
            <param name="stream">Pass a stream from which data will be read.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xSystemIO.QueryBinaryBlockToStream(System.String,System.IO.Stream)">
            <summary>
            <para>Queries IEEE binary data block from instrument to stream. Use it for
            fast fetching of binary block data.</para>
            </summary>
            <param name="query">Query command.</param>
            <param name="stream">Pass a stream to which data will be written.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xSystemIO.QueryBinaryDataBlockToStreamWithOPCSync(System.String,System.IO.Stream,System.Nullable{System.Int32})">
            <summary>
            <para>Queries IEEE binary data block from instrument to stream. Use it for
            fast fetching of binary block data. If timeout is null, -1 or 0, the current
            Opc Timeout is used.</para>
            </summary>
            <param name="query">Query command.</param>
            <param name="stream">Pass a stream to which data will be written.</param>
            <param name="timeout">Timeout value. If timeout is null, -1 or 0, the current
            Opc Timeout is used.</param>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions">
            <summary>
            <para>This subsystem contains methods for Utility Functions.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.IDNQueryResponse">
            <summary>
            <para>Returns the ID Query response string.</para>
            <para>SCPI command:</para>
            <para>*IDN?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.Logging">
            <summary>
            <para>This property switches logging.</para>
            <para>SCPI command:</para>
            <para>no_command</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.SelfTestQuery">
            <summary>
            <para>Triggers selftests of the instrument and returns an error code in
            decimal form (see Service Manual supplied with the instrument). 0 indicates no
            errors occured.</para>
            <para>SCPI command:</para>
            <para>*TST?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.OPCTimeout">
            <summary>
            <para>Thise parameter specifies the maximum time to wait for operation
            complete in milliseconds.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.VisaTimeout">
            <summary>
            <para>Thise parameter specifies the visa timeout in milliseconds.</para>
            <para>SCPI command:</para>
            <para>cmd</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.ProcessAllPreviousCommands">
            <summary>
            <para>Stops further property processing until all propertys sent before *WAI
            have been executed.</para>
            <para>SCPI command:</para>
            <para>*WAI</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.VisaManufacturer">
            <summary>
            <para>Reads VISA manufacturer string.</para>
            <para>SCPI command:</para>
            <para>cmd</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.ClearStatus">
            <summary>
            <para>Clear status.</para>
            <para>SCPI command:</para>
            <para>*CLS</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.AddStreamLogger(System.IO.Stream)">
            <summary>
            <para>This method adds the stream for logging.</para>
            </summary>
            <param name="stream">Select a stream for logging.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.RemoveStreamLogger(System.IO.Stream)">
            <summary>
            <para>This method removes the stream for logging.</para>
            </summary>
            <param name="stream">Select a stream to be deleted from logging.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.WriteStringToLog(System.String)">
            <summary>
            <para>Writes string message to log.</para>
            </summary>
            <param name="logMessage">String message.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.QueryBool(System.String)">
            <summary>
            <para>This method queries the bool value.</para>
            </summary>
            <param name="command">The query to be sent to the instrument.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.QueryInt32(System.String)">
            <summary>
            <para>This method queries the int32 value.</para>
            </summary>
            <param name="command">The query to be sent to the instrument.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.QueryDouble(System.String)">
            <summary>
            <para>This method queries the double value.</para>
            </summary>
            <param name="command">The query to be sent to the instrument.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.QueryString(System.String)">
            <summary>
            <para>This method queries the string value.</para>
            </summary>
            <param name="command">The query to be sent to the instrument.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.Reset">
            <summary>
            <para>RESET resets the instrument to a defined default state. The method has
            the same effect as pressing the PRESET key.</para>
            <para>SCPI command(s):</para>
            <para>*RST</para>
            <para>*CLS</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.SelfTest">
            <summary>
            <para>Runs the instrument&apos;s self test routine.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.RevisionQuery(System.String@,System.String@)">
            <summary>
            <para>Returns the revision numbers of the instrument driver and instrument
            firmware, and tells the user with which instrument firmware this revision of
            the driver is compatible.</para>
            </summary>
            <param name="instrumentDriverRevision">Returns the Instrument Driver Software
            Revision.</param>
            <param name="firmwareRevision">Returns the Instrument Firmware
            Revision.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.Delay(System.Double)">
            <summary>
            <para>Suspends the program for the selected number of second.</para>
            </summary>
            <param name="seconds">Sets the number of seconds.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.ErrorQueryAll">
            <summary>
            <para>Returns all error.</para>
            <para>SCPI command(s):</para>
            <para>SYSTem:ERRor?</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.QueryOPC">
            <summary>
            <para>Queries the OPC.</para>
            <para>SCPI command(s):</para>
            <para>*OPC?</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.QueryOPC(System.Int32)">
            <summary>
            <para>Queries the OPC. After the entered timeout in milliseconds, the method
            throws the Ivi.Driver.IOTimeoutException. If timeout is null, -1 or 0, the
            current Opc Timeout is used.</para>
            <para>SCPI command(s):</para>
            <para>*OPC?</para>
            </summary>
            <param name="timeoutMs">Timeout value. If timeout is null, -1 or 0, the
            current Opc Timeout is used.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.InstrumentOptions">
            <summary>
            <para>Returns an array of all the installed instrument options.</para>
            <para>SCPI command(s):</para>
            <para>*OPT?</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.IRsHmc804xUtilityFunctions.HasOptionInstalled(System.String)">
            <summary>
            <para>Returns true if the instrument has the entered option installed.</para>
            </summary>
            <param name="option">The option to check on the instrument. E.g.,
            &quot;K10&quot;</param>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xDisplay">
            <summary>
            <para>This class contains the attribute that configure display.</para>
            </summary>
            <summary>
            <para>This class contains the attribute that configure display.</para>
            </summary>
            <summary>
            <para>This class contains the attribute that configure display.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xDisplay.Clear">
            <summary>
            <para>Clears the text message box on the front display.</para>
            <para>SCPI command:</para>
            <para>DISPlay:TEXT:CLEar</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xDisplay.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xDisplay.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xDisplay.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xDisplay.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xDisplay.ShowMessageBox(System.String)">
            <summary>
            <para>Displays a text message box on the front display.</para>
            <para>SCPI command(s):</para>
            <para>DISPlay:TEXT[:DATA]</para>
            </summary>
            <param name="text">String with message text.</param>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs">
            <summary>
            <para>This class contains the attribute that configure output.</para>
            </summary>
            <summary>
            <para>This class contains the attribute that configure output.</para>
            </summary>
            <summary>
            <para>This class contains the attribute that configure output.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.Arbitrary">
            <summary>
            <para>This class contains the attribute that configure arbitrary
            function.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.Fuse">
            <summary>
            <para>This class contains the attribute that configure electronic fuse.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.Ovp">
            <summary>
            <para>This class contains the attribute that configure the ovp (over voltage
            protection).</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.Opp">
            <summary>
            <para>This class contains the attribute that configure the opp (over power
            protection).</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.Ramp">
            <summary>
            <para>This class contains the attribute that configure easy ramp.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.AnalogInput">
            <summary>
            <para>This class contains the attribute that configure analog input.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.Measurement">
            <summary>
            <para>This class contains the attribute that configure meas function.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.Sequence">
            <summary>
            <para>This class contains the attribute that configure power sequencing
            function.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.SelectedChannel">
            <summary>
            <para>This property select the channel (instrument) for which all the
            following propertys will be executed.</para>
            <para>SCPI command:</para>
            <para>INSTrument:NSELect</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.CurrentLimit">
            <summary>
            <para>Defines the current value of the selected channel.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]CURRent[:LEVel][:IMMediate][:AMPLitude]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.CurrentStepSize">
            <summary>
            <para>Defines the incremental step size for the CURRent {UP|DOWN}
            property.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]CURRent[:LEVel][:IMMediate]:STEP[:INCRement]</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.ResetCurrentStepSize">
            <summary>
            <para>Resets the incremental step size for the CURRent.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]CURRent[:LEVel][:IMMediate]:STEP[:INCRement] DEFault</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.Enabled">
            <summary>
            <para>Turns ON/OFF the previous selected channel. When switching ON, Master
            switch is also switched ON. When switching OFF, Master switch is not changed.
            If changing the Master switch status is not desired, use the <see
            cref="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.ChannelOnlyEnabled"/>.</para>
            <para>SCPI command:</para>
            <para>OUTPut[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.MasterEnabled">
            <summary>
            <para>Switchs ON/OFF all previous selected channels simultaneously.</para>
            <para>SCPI command:</para>
            <para>OUTPut:MASTer[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.ChannelOnlyEnabled">
            <summary>
            <para>Turns the output ON or OFF. Compared to <see cref="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.Enabled"/>, it
            doesn&apos;t change the Master switch settings.</para>
            <para>SCPI command:</para>
            <para>OUTPut:CHANnel[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.VoltageLevel">
            <summary>
            <para>Defines the voltage value of the selected channel.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage[:LEVel][:IMMediate][:AMPLitude]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.VoltageStepSize">
            <summary>
            <para>Defines the incremental step size for the VOLTage {UP|DOWN}
            property.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage[:LEVel][:IMMediate]:STEP[:INCRement]</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.ResetVoltageStepSize">
            <summary>
            <para>Resets the incremental step size for the VOLTage.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage[:LEVel][:IMMediate]:STEP[:INCRement] DEFault</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.ChannelFusion">
            <summary>
            <para>Sets or queries the output fusion state for 2-channel model.</para>
            <para>SCPI command:</para>
            <para>OUTPut:FUSion</para>
            <para>Instrument(s): NGA102|NGA142</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.Mode">
            <summary>
            <para>Sets the output operating mode of the specified channel.</para>
            <para>SCPI command:</para>
            <para>OUTPut:MODE</para>
            <para>Instrument(s): NGF201</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.QueryMode">
            <summary>
            <para>Queries the output operating mode of the previous selected
            channel.</para>
            <para>SCPI command:</para>
            <para>OUTPut:MODE?</para>
            <para>Instrument(s): NGA101|NGA141|NGA102|NGA142|NGF201</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.VoltmeterEnabled">
            <summary>
            <para>Configures the DVM mode state for the previous selected channel</para>
            <para>SCPI command:</para>
            <para>[SOURce]:VOLTage:DVM[:STATe]</para>
            <para>Instrument(s): NGF201</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.QueryVoltmeterValue">
            <summary>
            <para>Returns the measured voltmeter value of the previous selected
            channel</para>
            <para>SCPI command:</para>
            <para>MEASure[:VOLTage]:DVM?</para>
            <para>Instrument(s): NGF201</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.Configure(System.Int32,System.Double,System.Double)">
            <summary>
            <para>Combined setting of voltage and current for each channel.</para>
            <para>SCPI command(s):</para>
            <para>APPLy
            {&lt;voltage&gt;|DEF|MIN|MAX}[,{&lt;current&gt;|DEF|MIN|MAX}][,{OUT1|OUT2|OUT3}]</para>
            </summary>
            <param name="output">Numerical selection of a channel</param>
            <param name="voltage">Defines the voltage value of the selected
            channel</param>
            <param name="current">Defines the current value of the selected
            channel</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.Measure(RohdeSchwarz.RsHmc804x.MeasurementType)">
            <summary>
            <para>Takes a measurement on the output signal and returns the measured
            value.</para>
            <para>SCPI command(s):</para>
            <para>MEASure[:SCALar][:VOLTage][:DC]?</para>
            <para>MEASure[:SCALar]:CURRent[:DC]?</para>
            <para>MEASure[:SCALar]:POWer?</para>
            <para>MEASure[:SCALar]:ENERgy?</para>
            </summary>
            <param name="measurementType">The type of measurement to take.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.QueryCurrentLimitMax(System.Double)">
            <summary>
            <para>This method returns the maximum programmable current limit that the
            power supply accepts for a particular voltage level on an output.</para>
            <para>SCPI command(s):</para>
            <para>[SOURce:]VOLTage[:LEVel][:IMMediate][:AMPLitude]</para>
            <para>[SOURce:]CURRent[:LEVel][:IMMediate][:AMPLitude]? MAX</para>
            </summary>
            <param name="voltageLevel">The voltage level for which to determine the
            maximum programmable current limit.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputs.QueryVoltageLevelMax(System.Double)">
            <summary>
            <para>This method returns the maximum programmable voltage level that the
            power supply accepts for a particular current limit on an output.</para>
            <para>SCPI command(s):</para>
            <para>[SOURce:]CURRent[:LEVel][:IMMediate][:AMPLitude]</para>
            <para>[SOURce:]VOLTage[:LEVel][:IMMediate][:AMPLitude]? MAX</para>
            </summary>
            <param name="currentLimit">The current limit for which to determine the
            maximum programmable voltage level.</param>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsArbitrary">
            <summary>
            <para>This class contains the attribute that configure arbitrary function.</para>
            </summary>
            <summary>
            <para>This class contains the attribute that configure arbitrary function.</para>
            </summary>
            <summary>
            <para>This class contains the attribute that configure arbitrary function.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsArbitrary.Enabled">
            <summary>
            <para>Enables (On/1) / Disables (Off/0) the arbitrary function of the selected
            channel.</para>
            <para>SCPI command:</para>
            <para>ARBitrary[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsArbitrary.Repetitions">
            <summary>
            <para>Sets the arbitrary waveform repetitions.</para>
            <para>SCPI command:</para>
            <para>ARBitrary:REPetitions</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsArbitrary.Endpoint">
            <summary>
            <para>Sets the endpoint of the arbitrary waveform.</para>
            <para>SCPI command:</para>
            <para>ARBitrary:ENDPoint</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsArbitrary.Reset">
            <summary>
            <para>Deletes the arbitrary waveform values.</para>
            <para>SCPI command:</para>
            <para>ARBitrary:CLEar</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsArbitrary.SaveFile">
            <summary>
            <para>Saves the arbitrary waveform in the selected file.</para>
            <para>SCPI command:</para>
            <para>ARBitrary:SAVE</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsArbitrary.LoadFile">
            <summary>
            <para>Loads the arbitrary waveform from the selected file.</para>
            <para>SCPI command:</para>
            <para>ARBitrary:LOAD</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsArbitrary.Triggered">
            <summary>
            <para>Enables (On/1) / Disables (Off/0) the trigger input on the rear
            connector for arbitrary functionality.</para>
            <para>SCPI command:</para>
            <para>ARBitrary:TRIGgered[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsArbitrary.TriggerMode">
            <summary>
            <para>Selects the trigger mode.</para>
            <para>SCPI command:</para>
            <para>ARBitrary:TRIGgered:MODE</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsArbitrary.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsArbitrary.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsArbitrary.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsArbitrary.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsArbitrary.ConfigureFile(System.String,RohdeSchwarz.RsHmc804x.Device)">
            <summary>
            <para>Set the filename and device for arbitrary.</para>
            </summary>
            <param name="filename">Selects the filename.</param>
            <param name="device">Selects the device.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsArbitrary.WriteData(System.Double[],System.Double[],System.Double[],System.Int32[])">
            <summary>
            <para>Sets the arbitrary waveform values for the selected channel.</para>
            </summary>
            <param name="voltage"></param>
            <param name="current"></param>
            <param name="time"></param>
            <param name="interpolationMode"></param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsArbitrary.ReadData(System.Double[]@,System.Double[]@,System.Double[]@,System.Int32[]@)">
            <summary>
            <para>Queries the arbitrary waveform values of the selected channel.</para>
            </summary>
            <param name="voltage"></param>
            <param name="current"></param>
            <param name="time"></param>
            <param name="interpolationMode"></param>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuse">
            <summary>
            <para>This class contains the attribute that configure electronic fuse.</para>
            </summary>
            <summary>
            <para>This class contains the attribute that configure electronic fuse.</para>
            </summary>
            <summary>
            <para>This class contains the attribute that configure electronic fuse.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuse.Enabled">
            <summary>
            <para>Enables (On/1) / Disables (Off/0) the fuse for the selected
            channel.</para>
            <para>SCPI command:</para>
            <para>FUSE[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuse.Delay">
            <summary>
            <para>Sets the fuse delay.</para>
            <para>SCPI command:</para>
            <para>FUSE:DELay</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuse.Link">
            <summary>
            <para>Combines the channel fuses (Fuse Linking).</para>
            <para>SCPI command:</para>
            <para>FUSE:LINK</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuse.Unlink">
            <summary>
            <para>Unlinking the combined channel fuses</para>
            <para>SCPI command:</para>
            <para>FUSE:UNLink</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuse.Tripped">
            <summary>
            <para>Query, if the fuse has tripped.</para>
            <para>SCPI command:</para>
            <para>FUSE:TRIPed?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuse.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuse.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuse.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuse.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuse.IsLinked(System.Int32)">
            <summary>
            <para>Queries the combined channel fuses. It returns the link status between
            the currently selected channel and the parameter.</para>
            </summary>
            <param name="channel">Specifies fuse linked channel.</param>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsOvp">
            <summary>
            <para>This class contains the attribute that configure the ovp (over voltage
            protection).</para>
            </summary>
            <summary>
            <para>This class contains the attribute that configure the ovp (over voltage
            protection).</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsOvp.ResetOutputProtection">
            <summary>
            <para>Resets the state of the OVP function.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:PROTection:CLEar</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsOvp.Enabled">
            <summary>
            <para>Enables (ON/1) / Disables (OFF/0) the OVP (over voltage protection)
            function.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:PROTection[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsOvp.Limit">
            <summary>
            <para>Sets the voltage level of the OVP function when the OVP will be
            tripped.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:PROTection:LEVel</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsOvp.Tripped">
            <summary>
            <para>Query if OVP is tripped (1) or is not tripped (0).</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:PROTection:TRIPped?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsOvp.Mode">
            <summary>
            <para>Sets the OVP function mode.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:PROTection:MODE</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsOvp.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsOvp.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsOvp.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsOvp.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsOpp">
            <summary>
            <para>This class contains the attribute that configure the opp (over power
            protection).</para>
            </summary>
            <summary>
            <para>This class contains the attribute that configure the opp (over power
            protection).</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsOpp.ResetPowerProtection">
            <summary>
            <para>Resets the state of the OPP function</para>
            <para>SCPI command:</para>
            <para>[SOURce:]POWer:PROTection:CLEar</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsOpp.Enabled">
            <summary>
            <para>Enables (ON/1) / Disables (OFF/0) the OPP (over power protection)
            function.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]POWer:PROTection[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsOpp.Limit">
            <summary>
            <para>Sets the power level of the OPP function when the OPP will be
            tripped.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]POWer:PROTection:LEVel</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsOpp.Tripped">
            <summary>
            <para>Query if OPP is tripped (1) or is not tripped (0).</para>
            <para>SCPI command:</para>
            <para>[SOURce:]POWer:PROTection:TRIPped?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsOpp.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsOpp.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsOpp.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsOpp.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsRamp">
            <summary>
            <para>This class contains the attribute that configure easy ramp.</para>
            </summary>
            <summary>
            <para>This class contains the attribute that configure easy ramp.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsRamp.Enabled">
            <summary>
            <para>Enables (ON/1) / Disables (OFF/0) the EasyRamp function.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:RAMP[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsRamp.Duration">
            <summary>
            <para>Sets the duration of the voltage ramp.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:RAMP:DURation</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsRamp.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsRamp.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsRamp.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsRamp.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuseAnalogInput">
            <summary>
            <para>This class contains the attribute that configure analog input.</para>
            </summary>
            <summary>
            <para>This class contains the attribute that configure analog input.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuseAnalogInput.Enabled">
            <summary>
            <para>Enables (ON/1) / Disables (OFF/0) the analog input on the rear
            connector.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:AINPut[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuseAnalogInput.Input">
            <summary>
            <para>Selects the input unit of the analog input connector.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:AINPut:INPut</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuseAnalogInput.Mode">
            <summary>
            <para>Selects the mode of the analog input connector.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:AINPut:MODE</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuseAnalogInput.Threshold">
            <summary>
            <para>Sets the threshold for the STEP input mode.</para>
            <para>SCPI command:</para>
            <para>[SOURce:]VOLTage:AINPut:THReshold</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuseAnalogInput.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuseAnalogInput.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuseAnalogInput.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsFuseAnalogInput.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurement">
            <summary>
            <para>This class contains the attribute that configure meas function.</para>
            </summary>
            <summary>
            <para>This class contains the attribute that configure meas function.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurement.Logging">
            <summary>
            <para>This class contains the attribute that configure system logging.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurement.Energy">
            <summary>
            <para>This class contains the attribute that configure energy counter.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurement.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurement.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurement.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurement.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLogging">
            <summary>
            <para>This class contains the attribute that configure system logging.</para>
            </summary>
            <summary>
            <para>This class contains the attribute that configure system logging.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLogging.File">
            <summary>
            <para>This class contains the attribute that configure system logging
            file.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLogging.Enabled">
            <summary>
            <para>Enables / Disables global data logging function.</para>
            <para>SCPI command:</para>
            <para>LOG[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLogging.ChannelLoggingEnabled">
            <summary>
            <para>Enables / Disables data logging function for the selected
            channel.</para>
            <para>SCPI command:</para>
            <para>LOG:CHANnel[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLogging.Format">
            <summary>
            <para>Selects the format for logging.</para>
            <para>SCPI command:</para>
            <para>LOG:FORMat</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLogging.Mode">
            <summary>
            <para>Selects the mode of the logging function.</para>
            <para>SCPI command:</para>
            <para>LOG:MODE</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLogging.Time">
            <summary>
            <para>Sets the time in &apos;TIME&apos; mode.</para>
            <para>SCPI command:</para>
            <para>LOG:TIME</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLogging.Count">
            <summary>
            <para>Sets the number of samples in &apos;COUNt&apos; mode.</para>
            <para>SCPI command:</para>
            <para>LOG:COUNt</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLogging.Interval">
            <summary>
            <para>Sets the interval between two measurements in seconds.</para>
            <para>SCPI command:</para>
            <para>LOG:INTerval</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLogging.Triggered">
            <summary>
            <para>Sets the mode of the trigger.</para>
            <para>SCPI command:</para>
            <para>LOG:TRIGgered</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLogging.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLogging.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLogging.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLogging.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLoggingFile">
            <summary>
            <para>This class contains the attribute that configure system logging file.</para>
            </summary>
            <summary>
            <para>This class contains the attribute that configure system logging file.</para>
            </summary>
            <summary>
            <para>This class contains the attribute that configure system logging file.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLoggingFile.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLoggingFile.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLoggingFile.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLoggingFile.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLoggingFile.ConfigureFile(System.String,RohdeSchwarz.RsHmc804x.Device)">
            <summary>
            <para>Set the filename and device for logging.</para>
            <para>SCPI command(s):</para>
            <para>LOG:FNAMe {&lt;File_Name&gt;},[{INT | EXT | DEF}]</para>
            </summary>
            <param name="filename">Selects the filename.</param>
            <param name="device">Selects the device.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLoggingFile.ReadFileFromInstrument(System.String,RohdeSchwarz.RsHmc804x.Device,System.String)">
            <summary>
            <para>Read the file &apos;Filename&apos; (INT -&gt; Internal Memory, EXT -&gt;
            USB Stick, DEF -&gt; Internal Memory).</para>
            <para>SCPI command(s):</para>
            <para>DATA:DATA? {&lt;&apos;Filename&apos;&gt;} [ {INT | EXT | DEF } ]</para>
            </summary>
            <param name="filename">Selects the filename.</param>
            <param name="device">Selects the device.</param>
            <param name="destination">Defines destination file to which the data transfer
            from instrument to control computer applies.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLoggingFile.Delete(System.String,RohdeSchwarz.RsHmc804x.Device)">
            <summary>
            <para>Delete the file &apos;Filename&apos; (INT -&gt; Internal Memory, EXT
            -&gt; USB Stick, DEF -&gt; Internal Memory).</para>
            <para>SCPI command(s):</para>
            <para>DATA:DELete {&lt;&apos;Filename&apos;&gt;} [ {INT | EXT | DEF } ]</para>
            </summary>
            <param name="filename">Selects the filename.</param>
            <param name="device">Selects the device.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLoggingFile.ReadDataPoints(System.String,RohdeSchwarz.RsHmc804x.Device)">
            <summary>
            <para>Read the number of measurements from &apos;Filename&apos; (INT -&gt;
            Internal Memory, EXT -&gt; USB Stick, DEF -&gt; Internal Memory).</para>
            <para>SCPI command(s):</para>
            <para>DATA:POINts? {&lt;&apos;Filename&apos;&gt;} [ {INT | EXT | DEF }
            ]</para>
            </summary>
            <param name="filename">Selects the filename.</param>
            <param name="device">Selects the device.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementLoggingFile.ReadDataCatalog(RohdeSchwarz.RsHmc804x.Device)">
            <summary>
            <para>List all available files of the selected memory (INT -&gt; Internal
            Memory, EXT -&gt; USB Stick, DEF -&gt; Internal Memory).</para>
            <para>SCPI command(s):</para>
            <para>DATA:LIST? [ {INT | EXT | DEF } ]</para>
            </summary>
            <param name="device">Selects the device.</param>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementEnergy">
            <summary>
            <para>This class contains the attribute that configure energy counter.</para>
            </summary>
            <summary>
            <para>This class contains the attribute that configure energy counter.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementEnergy.Enabled">
            <summary>
            <para>Enables (ON/1) / disables (OFF/0) the power counter function.</para>
            <para>SCPI command:</para>
            <para>MEASure[:SCALar]:ENERgy:STATe</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementEnergy.Reset">
            <summary>
            <para>Resets the amount of the energie counter function.</para>
            <para>SCPI command:</para>
            <para>MEASure[:SCALar]:ENERgy:RESet</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementEnergy.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementEnergy.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementEnergy.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsMeasurementEnergy.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsSequence">
            <summary>
            <para>This class contains the attribute that configure power sequencing
            function.</para>
            </summary>
            <summary>
            <para>This class contains the attribute that configure power sequencing
            function.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsSequence.Enabled">
            <summary>
            <para>Enables (On/1) / Disables (Off/0) the power sequencing function.</para>
            <para>SCPI command:</para>
            <para>SEQuence[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsSequence.DelayEnabled">
            <summary>
            <para>Enables (On/1) / Disables (Off/0) the delay of the selected
            channel.</para>
            <para>SCPI command:</para>
            <para>SEQuence:CHANnel[:STATe]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsSequence.Delay">
            <summary>
            <para>Set the delay in sequencing module for the selected channel.</para>
            <para>SCPI command:</para>
            <para>SEQuence:DELay</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsSequence.Triggered">
            <summary>
            <para>Enables (On/1) / Disables (Off/0) the trigger function.</para>
            <para>SCPI command:</para>
            <para>SEQuence:TRIGgered</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsSequence.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsSequence.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsSequence.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xOutputsSequence.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xTrigger">
            <summary>
            <para>This class contains the attribute that configure trigger.</para>
            </summary>
            <summary>
            <para>This class contains the attribute that configure trigger.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xTrigger.Slope">
            <summary>
            <para>Specifies the type of EXTERNAL trigger input -&gt; POSitive (rising
            edge), NEGative (falling Edge)</para>
            <para>SCPI command:</para>
            <para>TRIGger:SLOPe</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xTrigger.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xTrigger.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xTrigger.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xTrigger.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xGeneralInstrumentSettings">
            <summary>
            <para>This subsystem contains methods for General Instrument Settings.</para>
            </summary>
            <summary>
            <para>This subsystem contains methods for General Instrument Settings.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xGeneralInstrumentSettings.HardCopy">
            <summary>
            <para>This subsystem contains methods for General Instrument Settings of Hard
            Copy.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xGeneralInstrumentSettings.System">
            <summary>
            <para>This subsystem contains methods for General Instrument Settings of
            System Subsystem.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xGeneralInstrumentSettings.Status">
            <summary>
            <para>This subsystem contains methods for General Instrument Settings of
            Status Subsystem.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xGeneralInstrumentSettings.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xGeneralInstrumentSettings.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xGeneralInstrumentSettings.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xGeneralInstrumentSettings.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xHardCopy">
            <summary>
            <para>This subsystem contains methods for General Instrument Settings of Hard
            Copy.</para>
            </summary>
            <summary>
            <para>This subsystem contains methods for General Instrument Settings of Hard
            Copy.</para>
            </summary>
            <summary>
            <para>This subsystem contains functions for General Instrument Settings of Hard
            Copy.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xHardCopy.ImageFormat">
            <summary>
            <para>The parameter selects the data format of the screenshot.</para>
            <para>SCPI command:</para>
            <para>HCOPy:FORMat</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xHardCopy.ImageWidth">
            <summary>
            <para>Returns the width of the screenshot.</para>
            <para>SCPI command:</para>
            <para>HCOPy:SIZE:X?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xHardCopy.ImageHeight">
            <summary>
            <para>Returns the height of the screenshot.</para>
            <para>SCPI command:</para>
            <para>HCOPy:SIZE:Y?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xHardCopy.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xHardCopy.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xHardCopy.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xHardCopy.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xHardCopy.ImageSnapshot(System.String)">
            <summary>
            <para>The DATA? query responses screenshot data in binary format</para>
            </summary>
            <param name="destination">Defines destination file to which the data transfer
            from instrument to control computer applies.</param>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xSystem">
            <summary>
            <para>This subsystem contains methods for General Instrument Settings of System
            Subsystem.</para>
            </summary>
            <summary>
            <para>This subsystem contains methods for General Instrument Settings of System
            Subsystem.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xSystem.BeeperEnabled">
            <summary>
            <para>Disables or enables the beeper tone.</para>
            <para>SCPI command:</para>
            <para>SYSTem:BEEPer:STATe</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xSystem.StartBeep">
            <summary>
            <para>When sending a property, the device emits a beep.</para>
            <para>SCPI command:</para>
            <para>SYSTem:BEEPer[:IMMediate]</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xSystem.SystemError">
            <summary>
            <para>Query of the error list; After reading of an error it will be erased
            from the register. The next query will read the next error provided there was
            more than one.</para>
            <para>SCPI command:</para>
            <para>SYSTem:ERRor[:NEXT]?</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xSystem.SystemLocal">
            <summary>
            <para>Local operating mode (front panel control).</para>
            <para>SCPI command:</para>
            <para>SYSTem:LOCal</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xSystem.SystemRemote">
            <summary>
            <para>Remote control (front panel control locked).</para>
            <para>SCPI command:</para>
            <para>SYSTem:REMote</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xSystem.SystemRWLock">
            <summary>
            <para>The front panel control is locked; with the SystemLocal method the front
            panel control will be activated.</para>
            <para>SCPI command:</para>
            <para>SYSTem:RWLock</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xSystem.SystemVersion">
            <summary>
            <para>Query of the firmware version.</para>
            <para>SCPI command:</para>
            <para>SYSTem:VERSion?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xSystem.Options">
            <summary>
            <para>Returns the list of options installed on the instrument.</para>
            <para>SCPI command:</para>
            <para>SYSTem:OPTion?</para>
            <para>Instrument(s): NGA101|NGA141|NGA102|NGA142</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xSystem.DeviceFootPrint">
            <summary>
            <para>Returns device foot print info</para>
            <para>SCPI command:</para>
            <para>SYSTem:DFPRint?</para>
            <para>Instrument(s): NGA101|NGA141|NGA102|NGA142</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xSystem.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xSystem.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xSystem.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xSystem.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xStatus">
            <summary>
            <para>This subsystem contains methods for General Instrument Settings of Status
            Subsystem.</para>
            </summary>
            <summary>
            <para>This subsystem contains methods for General Instrument Settings of Status
            Subsystem.</para>
            </summary>
            <summary>
            <para>This subsystem contains functions for General Instrument Settings of Status
            Subsystem.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xStatus.StatusPreset">
            <summary>
            <para>Clears all bits in the Questionable Data enable register and the
            Standard Operation enable register.</para>
            <para>SCPI command:</para>
            <para>STATus:PRESet</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xStatus.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xStatus.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xStatus.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xStatus.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xStatus.SetRegister(RohdeSchwarz.RsHmc804x.RegisterGroup,System.Int32,RohdeSchwarz.RsHmc804x.RegisterType,System.Int32)">
            <summary>
            <para>Sets the value of selected status register.</para>
            </summary>
            <param name="registerGroup">Selects the status register group.</param>
            <param name="isummary">Selects the specific output.</param>
            <param name="registerType">Selects the type of status register.</param>
            <param name="value">Sets the value to be set to selected register.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xStatus.GetRegister(RohdeSchwarz.RsHmc804x.RegisterGroup,System.Int32,RohdeSchwarz.RsHmc804x.RegisterType)">
            <summary>
            <para>Queries the value of selected status register.</para>
            </summary>
            <param name="registerGroup">Selects the status register group.</param>
            <param name="isummary">Selects the specific output.</param>
            <param name="registerType">Selects the type of status register.</param>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xSystemIO">
            <summary>
            <para>This subsystem contains methods for System interface.</para>
            </summary>
            <summary>
            <para>This subsystem contains methods for System interface.</para>
            </summary>
            <summary>
            <para>This subsystem contains functions for System interface.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xSystemIO.IOTimeout">
            <summary>
            <para>Thise parameter specifies the visa timeout in milliseconds.</para>
            <para>SCPI command:</para>
            <para>cmd</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xSystemIO.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xSystemIO.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xSystemIO.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xSystemIO.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xSystemIO.ReadBytes">
            <summary>
            <para>Reads a complete response from the instrument.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xSystemIO.ReadString">
            <summary>
            <para>Reads a complete response from the instrument and returns it as a
            string.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xSystemIO.WriteBytes(System.Byte[])">
            <summary>
            <para>Write an array of bytes to the device.</para>
            </summary>
            <param name="buffer">The array of bytes to be written to the device.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xSystemIO.WriteString(System.String)">
            <summary>
            <para>Write a string to the device.</para>
            </summary>
            <param name="data">The string to be written to the device</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xSystemIO.WriteCommandWithOPCSync(System.String,System.Nullable{System.Int32})">
            <summary>
            <para>Sends a command to the instrument synchronised with OPC-polling. Use
            this function to wait for an instrument operation that can take a long time to
            complete, e.g. self-alignment. If timeout is null, -1 or 0, the current Opc
            Timeout is used.</para>
            </summary>
            <param name="command">Pass the string to be written to the instrument.</param>
            <param name="timeout">Timeout value. If timeout is null, -1 or 0, the current
            Opc Timeout is used.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xSystemIO.QueryWithOPCSync(System.String,System.Nullable{System.Int32})">
            <summary>
            <para>Sends a query to the instrument synchronised with OPC-polling. Use this
            function to wait for a response that can take a long time to complete e.g.
            self-alignment, calibration or self-test. If timeout is null, -1 or 0, the
            current Opc Timeout is used.</para>
            </summary>
            <param name="command">Pass the string to be written to the instrument.</param>
            <param name="timeout">Timeout value. If timeout is null, -1 or 0, the current
            Opc Timeout is used.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xSystemIO.WriteBinaryBlockFromStream(System.String,System.IO.Stream)">
            <summary>
            <para>Writes IEEE binary data block from stream to instrument. You need to
            specify the SCPI command to prepend the binary data block.</para>
            </summary>
            <param name="command">Command.</param>
            <param name="stream">Pass a stream from which data will be read.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xSystemIO.QueryBinaryBlockToStream(System.String,System.IO.Stream)">
            <summary>
            <para>Queries IEEE binary data block from instrument to stream. Use it for
            fast fetching of binary block data.</para>
            </summary>
            <param name="query">Query command.</param>
            <param name="stream">Pass a stream to which data will be written.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xSystemIO.QueryBinaryDataBlockToStreamWithOPCSync(System.String,System.IO.Stream,System.Nullable{System.Int32})">
            <summary>
            <para>Queries IEEE binary data block from instrument to stream. Use it for
            fast fetching of binary block data. If timeout is null, -1 or 0, the current
            Opc Timeout is used.</para>
            </summary>
            <param name="query">Query command.</param>
            <param name="stream">Pass a stream to which data will be written.</param>
            <param name="timeout">Timeout value. If timeout is null, -1 or 0, the current
            Opc Timeout is used.</param>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions">
            <summary>
            <para>This subsystem contains methods for Utility Functions.</para>
            </summary>
            <summary>
            <para>This subsystem contains methods for Utility Functions.</para>
            </summary>
            <summary>
            <para>This subsystem contains functions for Utility Functions.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.IDNQueryResponse">
            <summary>
            <para>Returns the ID Query response string.</para>
            <para>SCPI command:</para>
            <para>*IDN?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.Logging">
            <summary>
            <para>This property switches logging.</para>
            <para>SCPI command:</para>
            <para>no_command</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.SelfTestQuery">
            <summary>
            <para>Triggers selftests of the instrument and returns an error code in
            decimal form (see Service Manual supplied with the instrument). 0 indicates no
            errors occured.</para>
            <para>SCPI command:</para>
            <para>*TST?</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.OPCTimeout">
            <summary>
            <para>Thise parameter specifies the maximum time to wait for operation
            complete in milliseconds.</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.VisaTimeout">
            <summary>
            <para>Thise parameter specifies the visa timeout in milliseconds.</para>
            <para>SCPI command:</para>
            <para>cmd</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.ProcessAllPreviousCommands">
            <summary>
            <para>Stops further property processing until all propertys sent before *WAI
            have been executed.</para>
            <para>SCPI command:</para>
            <para>*WAI</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.VisaManufacturer">
            <summary>
            <para>Reads VISA manufacturer string.</para>
            <para>SCPI command:</para>
            <para>cmd</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.ClearStatus">
            <summary>
            <para>Clear status.</para>
            <para>SCPI command:</para>
            <para>*CLS</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.RepCapName">
            <summary>
            <para>Name of the RepCap e.g. &apos;Window&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.RepCapKey">
            <summary>
            <para>RepCap Key value e.g. &apos;Win1&apos;</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.Parent">
            <summary>
            <para>Parent RepCap</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.Name">
            <summary>
            <para>Returns the physical repeated capability identifier defined by the specific driver for the repeated
            capability that corresponds to the index that the user specifies. If the driver defines a qualified repeated
            capability name, this property returns the qualified name.</para>
            </summary>
            <remarks>
            <para>For an interface with only one repeated capability, i.e. the Count attribute is one, the driver may return
            an empty string</para>
            </remarks>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.AddStreamLogger(System.IO.Stream)">
            <summary>
            <para>This method adds the stream for logging.</para>
            </summary>
            <param name="stream">Select a stream for logging.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.RemoveStreamLogger(System.IO.Stream)">
            <summary>
            <para>This method removes the stream for logging.</para>
            </summary>
            <param name="stream">Select a stream to be deleted from logging.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.WriteStringToLog(System.String)">
            <summary>
            <para>Writes string message to log.</para>
            </summary>
            <param name="logMessage">String message.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.QueryBool(System.String)">
            <summary>
            <para>This method queries the bool value.</para>
            </summary>
            <param name="command">The query to be sent to the instrument.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.QueryInt32(System.String)">
            <summary>
            <para>This method queries the int32 value.</para>
            </summary>
            <param name="command">The query to be sent to the instrument.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.QueryDouble(System.String)">
            <summary>
            <para>This method queries the double value.</para>
            </summary>
            <param name="command">The query to be sent to the instrument.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.QueryString(System.String)">
            <summary>
            <para>This method queries the string value.</para>
            </summary>
            <param name="command">The query to be sent to the instrument.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.Reset">
            <summary>
            <para>RESET resets the instrument to a defined default state. The function has
            the same effect as pressing the PRESET key.</para>
            <para>SCPI command(s):</para>
            <para>*RST</para>
            <para>*CLS</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.SelfTest">
            <summary>
            <para>Runs the instrument&apos;s self test routine.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.RevisionQuery(System.String@,System.String@)">
            <summary>
            <para>Returns the revision numbers of the instrument driver and instrument
            firmware, and tells the user with which instrument firmware this revision of
            the driver is compatible.</para>
            </summary>
            <param name="instrumentDriverRevision">Returns the Instrument Driver Software
            Revision.</param>
            <param name="firmwareRevision">Returns the Instrument Firmware
            Revision.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.Delay(System.Double)">
            <summary>
            <para>Suspends the program for the selected number of second.</para>
            </summary>
            <param name="seconds">Sets the number of seconds.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.ErrorQueryAll">
            <summary>
            <para>Returns all error.</para>
            <para>SCPI command(s):</para>
            <para>SYSTem:ERRor?</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.QueryOPC">
            <summary>
            <para>Queries the OPC.</para>
            <para>SCPI command(s):</para>
            <para>*OPC?</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.QueryOPC(System.Int32)">
            <summary>
            <para>Queries the OPC. After the entered timeout in milliseconds, the method
            throws the Ivi.Driver.IOTimeoutException. If timeout is null, -1 or 0, the
            current Opc Timeout is used.</para>
            <para>SCPI command(s):</para>
            <para>*OPC?</para>
            </summary>
            <param name="timeoutMs">Timeout value. If timeout is null, -1 or 0, the
            current Opc Timeout is used.</param>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.InstrumentOptions">
            <summary>
            <para>Returns an array of all the installed instrument options.</para>
            <para>SCPI command(s):</para>
            <para>*OPT?</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.RsHmc804xUtilityFunctions.HasOptionInstalled(System.String)">
            <summary>
            <para>Returns true if the instrument has the entered option installed.</para>
            </summary>
            <param name="option">The option to check on the instrument. E.g.,
            &quot;K10&quot;</param>
        </member>
        <member name="T:RohdeSchwarz.RsHmc804x.CoreEx">
            <summary>
            <para>The CoreEx class extends the driver core to allow access to the driver&apos;s attributes and range
            tables.</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.CoreEx._integralDataTypes">
            <summary>
            <para>The integral data types: Int32, Int64, Enum</para>
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsHmc804x.CoreEx._numericDataTypes">
            <summary>
            <para>The numeric data types: Int32, Int64, Real64, Enum</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_ChannelOnlyEnabled_ReadCallback(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr)">
            <summary>
            NGE needs different command
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_ChannelOnlyEnabled_WriteCallback(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr,System.Object)">
            <summary>
            NGE needs different command + delay if Master Out is ON
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_GetOPCTimeout_Callback(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr)">
            <summary>
            <para>Read callback for OPC timeout.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_GetVisaTimeout_Callback(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr)">
            <summary>
            <para>Read callback for Visa timeout.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_logging_ReadCallback(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr)">
            <summary>
            <para>Read callback for logging state.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_logging_WriteCallback(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr,System.Object)">
            <summary>
            <para>Write callback for logging state.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_MasterEnabled_ReadCallback(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr)">
            <summary>
            NGE needs different command
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_MasterEnabled_WriteCallback(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr,System.Object)">
            <summary>
            NGE needs different command + delay
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_OutputEnabled_WriteCallback(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr,System.Object)">
            <summary>
            NGE needs a delay after
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_SelectChannel_WriteCallback(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr,System.Object)">
            <summary>
            Compare desired value with Chache value, only send to the instrument (*OPC?) if they are different
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_SetOPCTimeout_Callback(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr,System.Object)">
            <summary>
            <para>Write callback for OPC timeout.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_SetVisaTimeout_Callback(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr,System.Object)">
            <summary>
            <para>Write callback for Visa timeout.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.CoreEx.rshmc804x_VisaManufacturer_ReadCallback(IVINET.Internal.RepCapItemCollection,IVINET.Internal.Attr)">
            <summary>
            <para>Read callback for Visa manufacturer.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.CoreEx.CreateRangeTables">
            <summary>
            <para>Initializes range tables and entries.</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.CoreEx.CreateAttribute(System.Int64)">
            <summary>
            Instantiates the attribute with the given ID.
            Also sets the cache value to the default value.
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.CoreEx.DefaultInstrSetup">
            <summary>
            Instrument driver setup without resetting
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.CoreEx.GetSelectedChanel">
            <summary>
            Returns currently selected channel without querying the instrument
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsHmc804x.CoreEx.IsInstrumentNgxFamily">
            <summary>
            Returns true, if the instrument model is: NGE, NGA, NGF
            </summary>
        </member>
    </members>
</doc>
