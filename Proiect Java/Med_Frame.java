package main_pack;

import java.awt.Color;
import java.awt.Component;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.awt.event.ActionEvent;


/**
 *Clasa de designe si logica si afisarea frame cu lista medic
 * @author Andrei_Sviridov
 */
public class Med_Frame extends javax.swing.JFrame {

    /**
     * Creates new form Med_Frame
     */
    public Med_Frame() {
        initComponents();
    }

   

    /**
     * 
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        back_from_Med = new javax.swing.JButton();
        back_from_Med.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		Programari_Frame programari_Frame = new Programari_Frame();
				programari_Frame.setVisible(true);
                 
                   Med_Frame med_Frame = new Med_Frame();
                   med_Frame.setVisible(false);
        	}
        });
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        medClin_lab = new javax.swing.JLabel();
        java.awt.event.MouseAdapter labelClickListener = new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Prog_Frame altFrame = new Prog_Frame();
                altFrame.setVisible(true);
                Med_Frame medFrame = new Med_Frame();
                medFrame.setVisible(false);

            }
        };
        medClin_lab.addMouseListener(labelClickListener); 
        To_medic = new javax.swing.JButton();
        To_medic.addActionListener(new ActionListener() {
        	 public void actionPerformed(ActionEvent e) {
        	}
        });
        to_pacients = new javax.swing.JButton();
        to_pacients.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		Programari_Frame programari_Frame = new Programari_Frame();
				programari_Frame.setVisible(true);
                 
                   Med_Frame med_Frame = new Med_Frame();
                   med_Frame.setVisible(false);
                   
                
   			
   		
   				  JTable table_pacient = Programari_Frame.getTablePacient();

   				 DefaultTableModel model = (DefaultTableModel) table_pacient.getModel();
                    model.setRowCount(0);
                    

                    @SuppressWarnings("unused")
    				RedBlackTree redBlackTree = new RedBlackTree();
                    redBlackTree = RedBlackTree.makeTree();
            	   List<Pacient> arr =  RedBlackTree.Preluare_Lista();
            	   
        	        model.setRowCount(0);
        	          for (Pacient pacient : arr) {
        	            model.addRow(new Object[]{
        	                pacient.getNume(),
        	                pacient.getPrenume(),
        	                pacient.getAni(),
        	                pacient.getIstoric(),
        	                pacient.getProgramare(),
        	                pacient.getgen()
        	            });
        	        }

        	       
        	        table_pacient.setModel(model);
   		          
        		
        	}
        });
        Programari_btn = new javax.swing.JButton();
        list_med_lab = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        prename_m = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        name_m = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        data_m = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        gender_m = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        istoric_m = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_medic = new javax.swing.JTable();
        type_medic = new javax.swing.JComboBox<>();
        add_m = new javax.swing.JButton();
        search_m = new javax.swing.JButton();
      
        search_m.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                String numeCautat = name_m.getText();
                if (numeCautat != null && !numeCautat.isEmpty()) {
                    DefaultTableModel model = (DefaultTableModel) table_medic.getModel();
                    boolean medicGasit = false;
                    
                    table_medic.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
                        @Override
                        public Component getTableCellRendererComponent(JTable table, Object value,
                                boolean isSelected, boolean hasFocus, int row, int column) {
                            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                           
                            String numeMedic = (String) model.getValueAt(row, 0);
                            String prenumeMedic = (String) model.getValueAt(row, 1);
                            String tipMedic = (String) model.getValueAt(row, 2);

                            if (numeMedic.equalsIgnoreCase(numeCautat)
                                    || prenumeMedic.equalsIgnoreCase(numeCautat)
                                    || tipMedic.equalsIgnoreCase(numeCautat)) {
                                c.setBackground(Color.GREEN);
                            } else {
                                c.setBackground(table.getBackground()); 
                            }

                            return c;
                        }
                    });

                   
                    table_medic.repaint();

                   
                    for (int i = 0; i < model.getRowCount(); i++) {
                        String numeMedic = (String) model.getValueAt(i, 0);
                        String prenumeMedic = (String) model.getValueAt(i, 1);
                        String tipMedic = (String) model.getValueAt(i, 2);

                        if (numeMedic.equalsIgnoreCase(numeCautat)
                                || prenumeMedic.equalsIgnoreCase(numeCautat)
                                || tipMedic.equalsIgnoreCase(numeCautat)) {
                            medicGasit = true;
                            break;
                        }
                    }

                    if (!medicGasit) {
                        JOptionPane.showMessageDialog(Med_Frame.this, "Niciun medic găsit pentru numele introdus.");
                    }
                }
            }
        });
       

        delet_m = new javax.swing.JButton();
        delet_m.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }

            @SuppressWarnings("static-access")
			private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
                String nume = name_m.getText();
                String prenume = prename_m.getText();
                String istoric = istoric_m.getText();
                String data = data_m.getText();
                String gen = gender_m.getSelectedItem().toString();
                String tipMedic = type_medic.getSelectedItem().toString();

                if (nume.isEmpty() || prenume.isEmpty() || istoric.isEmpty() || data.isEmpty() || gen.isEmpty() || tipMedic.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Toate câmpurile trebuie completate!", "Avertisment", JOptionPane.WARNING_MESSAGE);
                } else {
                	   BST med = new BST();
                       med = BST.makeTree();
                    @SuppressWarnings("static-access")
					List<Medic> listaMedici = med.Preluare_Lista();

                    boolean exista = false;

                    for (Medic it : listaMedici) {
                        if (it.getNume().equals(nume) && it.getPrenume().equals(prenume) && it.getTipmedic().equals(tipMedic)
                                && it.getData().equals(data) && it.getIstoric().equals(istoric)) {
                            exista = true;
                            break;
                        }
                    }

                    if (exista == true) {
                      med.delete(nume, prenume, tipMedic);
                      
                    }

                    DefaultTableModel model = (DefaultTableModel) table_medic.getModel();
                    
                    model.setRowCount(0);
                    med = BST.makeTree();
                    List<Medic> listaMedici_2 = BST.Preluare_Lista();

                    for (Medic m : listaMedici_2) {
                        model.addRow(new Object[]{m.getNume(), m.getPrenume(), m.getTipmedic(), m.getIstoric(), m.getData(), m.getGen()});
                    }
                    med.salvare_list();

                    name_m.setText("");
                    prename_m.setText("");
                    istoric_m.setText("");
                    data_m.setText("");
                    gender_m.setSelectedIndex(0);
                    type_medic.setSelectedIndex(0);
                }
            }
        });
       

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(255, 102, 102));

        back_from_Med.setBackground(new java.awt.Color(255, 51, 51));
        back_from_Med.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        back_from_Med.setForeground(new java.awt.Color(204, 255, 255));
        back_from_Med.setText("Back");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(back_from_Med)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(back_from_Med)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(0, 153, 255));

        medClin_lab.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        medClin_lab.setForeground(new java.awt.Color(204, 255, 255));
        medClin_lab.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        medClin_lab.setText("MedClinic");
        medClin_lab.setToolTipText("");

        To_medic.setBackground(new java.awt.Color(0, 153, 255));
        To_medic.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        To_medic.setForeground(new java.awt.Color(204, 255, 255));
        To_medic.setText("Medici");

        to_pacients.setBackground(new java.awt.Color(0, 153, 255));
        to_pacients.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        to_pacients.setForeground(new java.awt.Color(204, 255, 255));
        to_pacients.setText("Pacienti");


        Programari_btn.setBackground(new java.awt.Color(0, 153, 255));
        Programari_btn.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        Programari_btn.setForeground(new java.awt.Color(204, 255, 255));
        Programari_btn.setText("Programari");
        Programari_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
             
            }
        });
        
        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(medClin_lab, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(To_medic, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(to_pacients, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(medClin_lab, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(to_pacients)
                .addGap(100, 100, 100)
                .addComponent(To_medic)
                .addGap(200, 200, 200))
        );

        list_med_lab.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        list_med_lab.setText("Lista Medici");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel5.setText("Nume:");

        prename_m.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel6.setText("Prenume:");
        jLabel6.setToolTipText("");

        name_m.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel7.setText("Medic");

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel8.setText("Istoric:");

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel9.setText("Data:");

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel10.setText("Gender:");

        gender_m.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Barbat", "Femeie", "Elicopter de lupta", "Printre primele 3 optiuni", "Nu stiu !", " ", " ", " " }));

        istoric_m.setColumns(20);
        istoric_m.setRows(5);
        jScrollPane1.setViewportView(istoric_m);

        jScrollPane2.setViewportBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        table_medic.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 51, 51), 1, true));
        table_medic.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        table_medic.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Nume", "Prenume", "Medic", "Istoric", "Data", "Gender"
            }
        ));
        jScrollPane2.setViewportView(table_medic);

        type_medic.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Medic de Familie", "Cardiolog ", "Neurolog", "Endocrinolog", "Dietologul" }));

        add_m.setBackground(new java.awt.Color(0, 153, 255));
        add_m.setText("Add");
        add_m.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        search_m.setBackground(new java.awt.Color(0, 204, 0));
        search_m.setText("Search");

        delet_m.setBackground(new java.awt.Color(255, 0, 51));
        delet_m.setText("Delete");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(list_med_lab, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(155, 155, 155)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(prename_m, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(name_m)
                                        .addGap(95, 95, 95)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(type_medic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(41, 41, 41)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(data_m, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gender_m, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(search_m, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(delet_m, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(add_m, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(24, 24, 24))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(list_med_lab, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(type_medic, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(name_m, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(data_m, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(add_m)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(search_m, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(prename_m, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gender_m, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delet_m))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    
   
    
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    @SuppressWarnings("static-access")
	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
    	 
    	String nume = name_m.getText();
    	String prenume = prename_m.getText();
    	String istoric = istoric_m.getText();
    	String data = data_m.getText();
    	String gen = gender_m.getSelectedItem().toString();
    	String tipMedic = type_medic.getSelectedItem().toString();

    	if (nume.isEmpty() || prenume.isEmpty() || istoric.isEmpty() || data.isEmpty() || gen.isEmpty() || tipMedic.isEmpty()) {
    	    JOptionPane.showMessageDialog(this, "Toate câmpurile trebuie completate!", "Avertisment", JOptionPane.WARNING_MESSAGE);
    	} else {
    	 
    	    
    	    
    	    boolean exista = false;
    	    @SuppressWarnings("unused")
			BST med = new BST();
            med = BST.makeTree();
            List<Medic> listaMedici = BST.Preluare_Lista();

    	    for(Medic it: listaMedici)
    	    {
    	    	if(it.getNume().equals(nume) && it.getPrenume().equals(prenume) && it.getTipmedic().equals(tipMedic)
    	    			&& it.getData().equals(data) && it.getIstoric().equals(istoric))
    	    	{
    	    		exista = true;
    	    		  JOptionPane.showMessageDialog(this, "Medicul deja exista", "Avertisment", JOptionPane.WARNING_MESSAGE);
    	    		  break;
    	    	}
    	    	
    	    }
    	    if(exista == false) {
    	    Medic medic = new Medic(nume, prenume, tipMedic, istoric, data, gen);
    	    med.insert(medic);
    	    }

    	  
    	    DefaultTableModel model = (DefaultTableModel) table_medic.getModel();
    	    model.setRowCount(0); 
    	    
            med = BST.makeTree();
            List<Medic> listaMedici_2 = BST.Preluare_Lista();

    	    for (Medic m : listaMedici_2) {
    	        model.addRow(new Object[]{m.getNume(), m.getPrenume(), m.getTipmedic(), m.getIstoric(), m.getData(), m.getGen()});
    	    }
    	    med.salvare_list();

    	  
    	    name_m.setText("");
    	    prename_m.setText("");
    	    istoric_m.setText("");
    	    data_m.setText("");
    	    gender_m.setSelectedIndex(0);
    	    type_medic.setSelectedIndex(0);
    	}


        } 
                                      

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Med_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Med_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Med_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Med_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               
            	new Med_Frame().setVisible(true);
               
            	@SuppressWarnings("unused")
				BST med = new BST();
                med = BST.makeTree();
                List<Medic> listaMedici = BST.Preluare_Lista();

                DefaultTableModel model = (DefaultTableModel) table_medic.getModel();
        	    model.setRowCount(0); 
                for (Medic m : listaMedici) {
        	        model.addRow(new Object[]{m.getNume(), m.getPrenume(), m.getTipmedic(), m.getIstoric(), m.getData(), m.getGen()});
        	    }
            }
        });
    }
    public static JTable getTableMedic() {
        return table_medic;
    }

    // Variables declaration - do not modify 
    private javax.swing.JButton Programari_btn;
    private javax.swing.JComboBox<String> gender_m;
    private javax.swing.JButton back_from_Med;
    private javax.swing.JButton add_m;
    private javax.swing.JButton search_m;
    private javax.swing.JButton delet_m;
    private javax.swing.JButton To_medic;
    private javax.swing.JButton to_pacients;
    private javax.swing.JComboBox<String> type_medic;
    private javax.swing.JLabel medClin_lab;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel list_med_lab;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JTable table_medic;
    private javax.swing.JTextArea istoric_m;
    private javax.swing.JTextField prename_m;
    private javax.swing.JTextField name_m;
    private javax.swing.JTextField data_m;
    // End of variables declaration  
   
   
    
    
}
